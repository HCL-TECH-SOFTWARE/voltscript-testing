{"classname":"TestSuite","comment":"Core unit testing suite.","containerclasstype":"","filenamebase":"TestSuite_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","qn":"TestSuite","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests 1&amp;quot;)\nDim myInt as Integer\ntestSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0\nmyInt = 1\ntestSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds","signaturecode":1024,"instancecode":1024,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"D278FE46808F950D8025893400572160","signature":"Class TestSuite","modifiers":"","classname":"TestSuite","parentclassname":"None","constructorsignature":"Sub New(title As String)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Core unit testing suite.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Core unit testing suite.","commenthtml":"Core unit testing suite.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests 1&amp;quot;)&amp;lt;br /&amp;gt;Dim myInt as Integer&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0&amp;lt;br /&amp;gt;myInt = 1&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds", "methods":[{"label":"addCustomBeforeAfter","comment":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","valuetype":"TestSuite","filenamebase":"addCustomBeforeAfter_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"addCustomBeforeAfter","codesample":"Dim testSuite as New TestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)\nDim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractCustomBeforeAfter\nCall testSuite.addCustomBeforeAfter(beforeAfter)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function addCustomBeforeAfter(customBeforeAfter As AbstractCustomBeforeAfter) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","inlinecomment":" \t &amp;apos; Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)&amp;lt;br /&amp;gt;Dim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;Call testSuite.addCustomBeforeAfter(beforeAfter)", "signatureelements":["Function"], "arguments":[{"label":"customBeforeAfter","comment":"Containing before and after functions","valuetype":"AbstractCustomBeforeAfter","filenamebase":"customBeforeAfter_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddCustomBeforeAfter","qn":"customBeforeAfter","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Containing before and after functions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Containing before and after functions","inlinecomment":" \t &amp;apos; Containing before and after functions"}]},{"label":"addError","comment":"Adds a test error to the results.","containerclasstype":"","filenamebase":"addError_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"addError","codesample":"Dim testSuite as New TestSuite(&amp;quot;Error Suite&amp;quot;)\nTry\n  Call testSuite.describe(&amp;quot;Error test&amp;quot;)\n  Error 1500, &amp;quot;Error thrown&amp;quot;\nCatch\n  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))\nEnd Try","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub addError(errorMsg As String, errorStack As Variant)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a test error to the results.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a test error to the results.","inlinecomment":" \t &amp;apos; Adds a test error to the results.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Error Suite&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;  Call testSuite.describe(&amp;quot;Error test&amp;quot;)&amp;lt;br /&amp;gt;  Error 1500, &amp;quot;Error thrown&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))&amp;lt;br /&amp;gt;End Try", "signatureelements":["Sub"], "arguments":[{"label":"errorMsg","comment":"A message to explain the error","valuetype":"String","filenamebase":"errorMsg_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError","qn":"errorMsg","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A message to explain the error&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A message to explain the error","inlinecomment":" \t &amp;apos; A message to explain the error"},{"label":"errorStack","comment":"More detailed stack for the error","valuetype":"Variant","filenamebase":"errorStack_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError","qn":"errorStack","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;More detailed stack for the error&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"More detailed stack for the error","inlinecomment":" \t &amp;apos; More detailed stack for the error"}]},{"label":"addResult","comment":"Adds a test success or failure to the results","containerclasstype":"","filenamebase":"addResult_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"addResult","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test with Results&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub addResult(success As Boolean, failMessage As String)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a test success or failure to the results&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a test success or failure to the results","inlinecomment":" \t &amp;apos; Adds a test success or failure to the results","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test with Results&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)", "signatureelements":["Sub"], "arguments":[{"label":"success","comment":"Whether the test was successful or not","valuetype":"Boolean","filenamebase":"success_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult","qn":"success","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether the test was successful or not&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether the test was successful or not","inlinecomment":" \t &amp;apos; Whether the test was successful or not"},{"label":"failMessage","comment":"A message to write to explain the failure","valuetype":"String","filenamebase":"failMessage_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult","qn":"failMessage","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A message to write to explain the failure&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A message to write to explain the failure","inlinecomment":" \t &amp;apos; A message to write to explain the failure"}]},{"label":"assertEqualsDouble","comment":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","valuetype":"Boolean","filenamebase":"assertEqualsDouble_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsDouble","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsDouble(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","inlinecomment":" \t &amp;apos; Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test against","inlinecomment":" \t &amp;apos; Double to test against"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertEqualsInteger","comment":"Tests whether two integers match","valuetype":"Boolean","filenamebase":"assertEqualsInteger_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsInteger","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 1\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two integers match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two integers match","inlinecomment":" \t &amp;apos; Tests whether two integers match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 1&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test against","inlinecomment":" \t &amp;apos; Integer to test against"},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test","inlinecomment":" \t &amp;apos; Integer to test"}]},{"label":"assertEqualsLong","comment":"Tests whether two Longs match","valuetype":"Boolean","filenamebase":"assertEqualsLong_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsLong","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsLong(expected As Long, actual As Long) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Longs match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Longs match","inlinecomment":" \t &amp;apos; Tests whether two Longs match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test against","inlinecomment":" \t &amp;apos; Long to test against"},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test","inlinecomment":" \t &amp;apos; Long to test"}]},{"label":"assertEqualsNumeric","comment":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","valuetype":"Boolean","filenamebase":"assertEqualsNumeric_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsNumeric","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 2\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two numeric values match, converting them to double and calling assertEqualsDouble&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","inlinecomment":" \t &amp;apos; Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test against","inlinecomment":" \t &amp;apos; Numeric to test against"},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test","inlinecomment":" \t &amp;apos; Numeric to test"}]},{"label":"assertEqualsPrimitive","comment":"Tests two primitive variants are the same, ignoring data type and CStr-ing values","valuetype":"Boolean","filenamebase":"assertEqualsPrimitive_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsPrimitive","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsPrimitive(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests two primitive variants are the same, ignoring data type and CStr-ing values&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests two primitive variants are the same, ignoring data type and CStr-ing values","inlinecomment":" \t &amp;apos; Tests two primitive variants are the same, ignoring data type and CStr-ing values","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against","inlinecomment":" \t &amp;apos; Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test","inlinecomment":" \t &amp;apos; Variant to test"}]},{"label":"assertEqualsPrimitiveOrPrimitiveArray","comment":"Tests two variant or variant arrays are the same.","valuetype":"Boolean","filenamebase":"assertEqualsPrimitiveOrPrimitiveArray_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsPrimitiveOrPrimitiveArray","codesample":"Dim testSuite As New TestSuite(|Variant Array Tests|)\nDim a(7) As Variant, b() As Variant\nDim i As integer\n    \nFor i = 0 To UBound(a)\n    a(i) = i\nNext\n    \nCall testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not\n    \nReDim b(0)\nb(0) = 0\nCall testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal\n    \nReDim b(i - 1)\nFor i = 0 To UBound(b)\n    b(i) = i\nNext\nCall testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true\n    \nb(0) = 1\nCall testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests two variant or variant arrays are the same.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests two variant or variant arrays are the same.","inlinecomment":" \t &amp;apos; Tests two variant or variant arrays are the same.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite As New TestSuite(|Variant Array Tests|)&amp;lt;br /&amp;gt;Dim a(7) As Variant, b() As Variant&amp;lt;br /&amp;gt;Dim i As integer&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;For i = 0 To UBound(a)&amp;lt;br /&amp;gt;    a(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;Call testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(0)&amp;lt;br /&amp;gt;b(0) = 0&amp;lt;br /&amp;gt;Call testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(i - 1)&amp;lt;br /&amp;gt;For i = 0 To UBound(b)&amp;lt;br /&amp;gt;    b(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;Call testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;b(0) = 1&amp;lt;br /&amp;gt;Call testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against","inlinecomment":" \t &amp;apos; Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test","inlinecomment":" \t &amp;apos; Variant to test"}]},{"label":"assertEqualsSingle","comment":"Tests whether two Single match","valuetype":"Boolean","filenamebase":"assertEqualsSingle_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsSingle","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsSingle(expected As Single, actual As Single) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Single match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Single match","inlinecomment":" \t &amp;apos; Tests whether two Single match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test against","inlinecomment":" \t &amp;apos; Single to test against"},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test","inlinecomment":" \t &amp;apos; Single to test"}]},{"label":"assertEqualsString","comment":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","valuetype":"Boolean","filenamebase":"assertEqualsString_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertEqualsString","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertEqualsString(expected As String, actual As String, caseInsensitive As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","inlinecomment":" \t &amp;apos; Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"String","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test against","inlinecomment":" \t &amp;apos; String to test against"},{"label":"actual","comment":"String to test","valuetype":"String","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test","inlinecomment":" \t &amp;apos; String to test"},{"label":"caseInsensitive","comment":"Whether to compare in current case or as lower case","valuetype":"Boolean","filenamebase":"caseInsensitive_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","qn":"caseInsensitive","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether to compare in current case or as lower case&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether to compare in current case or as lower case","inlinecomment":" \t &amp;apos; Whether to compare in current case or as lower case"}]},{"label":"assertFalse","comment":"Tests whether the value passed is a boolean False","valuetype":"Boolean","filenamebase":"assertFalse_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertFalse","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertFalse(actual As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether the value passed is a boolean False&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether the value passed is a boolean False","inlinecomment":" \t &amp;apos; Tests whether the value passed is a boolean False","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertFalse","qn":"actual","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to be tested&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to be tested","inlinecomment":" \t &amp;apos; Value to be tested"}]},{"label":"assertIs","comment":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIs_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIs","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test Is&amp;quot;)\nDim actual as String\nCall testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIs(expectedType As String, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","inlinecomment":" \t &amp;apos; Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test Is&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as String&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs","qn":"expectedType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type name expected for actual object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type name expected for actual object","inlinecomment":" \t &amp;apos; Type name expected for actual object"},{"label":"actual","comment":"Scalar o object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Scalar o object to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Scalar o object to test","inlinecomment":" \t &amp;apos; Scalar o object to test"}]},{"label":"assertIsBetween","comment":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsBetween_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIsBetween","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIsBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","inlinecomment":" \t &amp;apos; Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test against, the actual must be greater than or equal to this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","qn":"expected1","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test against, the actual must be greater than or equal to this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test against, the actual must be greater than or equal to this","inlinecomment":" \t &amp;apos; Lower bound to test against, the actual must be greater than or equal to this"},{"label":"expected2","comment":"Upper bound to test against, the actual must be less than or equal to this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","qn":"expected2","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test against, the actual must be less than or equal to this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test against, the actual must be less than or equal to this","inlinecomment":" \t &amp;apos; Upper bound to test against, the actual must be less than or equal to this"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","qn":"actual","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertIsGreaterThan","comment":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsGreaterThan_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIsGreaterThan","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test greater than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIsGreaterThan(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","inlinecomment":" \t &amp;apos; Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test greater than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Lower bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test","inlinecomment":" \t &amp;apos; Lower bound to test"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertIsLessThan","comment":"Tests whether a double is less than an expected value","valuetype":"Boolean","filenamebase":"assertIsLessThan_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIsLessThan","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test less than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIsLessThan(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is less than an expected value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is less than an expected value","inlinecomment":" \t &amp;apos; Tests whether a double is less than an expected value","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test less than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Upper bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test","inlinecomment":" \t &amp;apos; Upper bound to test"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertIsNot","comment":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIsNot_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIsNot","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test is no&amp;quot;)\nDim a as Integer\nCall testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIsNot(expectedType As String, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","inlinecomment":" \t &amp;apos; Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test is no&amp;quot;)&amp;lt;br /&amp;gt;Dim a as Integer&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot","qn":"expectedType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type name expected for actual object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type name expected for actual object","inlinecomment":" \t &amp;apos; Type name expected for actual object"},{"label":"actual","comment":"Scalar or object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Scalar or object to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Scalar or object to test","inlinecomment":" \t &amp;apos; Scalar or object to test"}]},{"label":"assertIsNotBetween","comment":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsNotBetween_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertIsNotBetween","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test is not between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertIsNotBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","inlinecomment":" \t &amp;apos; Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test is not between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test, the actual must be less than this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","qn":"expected1","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test, the actual must be less than this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test, the actual must be less than this","inlinecomment":" \t &amp;apos; Lower bound to test, the actual must be less than this"},{"label":"expected2","comment":"Upper bound to test, the actual must be greater than this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","qn":"expected2","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test, the actual must be greater than this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test, the actual must be greater than this","inlinecomment":" \t &amp;apos; Upper bound to test, the actual must be greater than this"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","qn":"actual","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertNotequalNumeric","comment":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","valuetype":"Boolean","filenamebase":"assertNotequalNumeric_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotequalNumeric","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 4\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotequalNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","inlinecomment":" \t &amp;apos; Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 4&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test against","inlinecomment":" \t &amp;apos; Numeric to test against"},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test","inlinecomment":" \t &amp;apos; Numeric to test"}]},{"label":"assertNotEqualDouble","comment":"Tests whether two doubles do not match, CStr-ing to avoid false positives.","valuetype":"Boolean","filenamebase":"assertNotEqualDouble_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualDouble","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualDouble(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two doubles do not match, CStr-ing to avoid false positives.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two doubles do not match, CStr-ing to avoid false positives.","inlinecomment":" \t &amp;apos; Tests whether two doubles do not match, CStr-ing to avoid false positives.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test against","inlinecomment":" \t &amp;apos; Double to test against"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test","inlinecomment":" \t &amp;apos; Double to test"}]},{"label":"assertNotEqualInteger","comment":"Tests whether two integers do not match","valuetype":"Boolean","filenamebase":"assertNotEqualInteger_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualInteger","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 5\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two integers do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two integers do not match","inlinecomment":" \t &amp;apos; Tests whether two integers do not match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test against","inlinecomment":" \t &amp;apos; Integer to test against"},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test","inlinecomment":" \t &amp;apos; Integer to test"}]},{"label":"assertNotEqualLong","comment":"Tests whether two Longs do not match","valuetype":"Boolean","filenamebase":"assertNotEqualLong_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualLong","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualLong(expected As Long, actual As Long) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Longs do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Longs do not match","inlinecomment":" \t &amp;apos; Tests whether two Longs do not match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test against","inlinecomment":" \t &amp;apos; Long to test against"},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test","inlinecomment":" \t &amp;apos; Long to test"}]},{"label":"assertNotEqualPrimitiveOrPrimitiveArray","comment":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","valuetype":"Boolean","filenamebase":"assertNotEqualPrimitiveOrPrimitiveArray_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualPrimitiveOrPrimitiveArray","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)\nDim actual as Integer\nactual = 2\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)\nCall testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","inlinecomment":" \t &amp;apos; Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against","inlinecomment":" \t &amp;apos; Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test","inlinecomment":" \t &amp;apos; Variant to test"}]},{"label":"assertNotEqualSingle","comment":"Tests whether two Singles do not match","valuetype":"Boolean","filenamebase":"assertNotEqualSingle_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualSingle","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualSingle(expected As Single, actual As Single) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Singles do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Singles do not match","inlinecomment":" \t &amp;apos; Tests whether two Singles do not match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test against","inlinecomment":" \t &amp;apos; Single to test against"},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test","inlinecomment":" \t &amp;apos; Single to test"}]},{"label":"assertNotEqualString","comment":"Tests whether two strings do not match","valuetype":"Boolean","filenamebase":"assertNotEqualString_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertNotEqualString","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertNotEqualString(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two strings do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two strings do not match","inlinecomment":" \t &amp;apos; Tests whether two strings do not match","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString","qn":"expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test against","inlinecomment":" \t &amp;apos; String to test against"},{"label":"actual","comment":"String to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString","qn":"actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test","inlinecomment":" \t &amp;apos; String to test"}]},{"label":"assertTrue","comment":"Tests whether the value passed is a boolean True and returns assertion outcome.","valuetype":"Boolean","filenamebase":"assertTrue_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"assertTrue","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function assertTrue(actual As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether the value passed is a boolean True and returns assertion outcome.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether the value passed is a boolean True and returns assertion outcome.","inlinecomment":" \t &amp;apos; Tests whether the value passed is a boolean True and returns assertion outcome.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertTrue","qn":"actual","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to be tested&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to be tested","inlinecomment":" \t &amp;apos; Value to be tested"}]},{"label":"checkStarted","comment":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.","containerclasstype":"","filenamebase":"checkStarted_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"checkStarted","codesample":"Private Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Call Me.testSuite.checkStarted()\n       \n       &amp;apos; Run tests\n    End Function\nEnd Class","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub checkStarted()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.","inlinecomment":" \t &amp;apos; Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.","parentclassname":"TestSuite","codesamplehtml":"Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       &amp;apos; Run tests&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"completeReport","comment":"Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.","containerclasstype":"","filenamebase":"completeReport_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"completeReport","codesample":"Sub Delete\n    Call Me.completeReport()\nEnd Sub","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub completeReport()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.","inlinecomment":" \t &amp;apos; Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.","parentclassname":"TestSuite","codesamplehtml":"Sub Delete&amp;lt;br /&amp;gt;    Call Me.completeReport()&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Sub"]},{"label":"delete","comment":"Destructor","containerclasstype":"","filenamebase":"delete_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"delete","codesample":"","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub delete()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor","inlinecomment":" \t &amp;apos; Destructor","parentclassname":"TestSuite","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"describe","comment":"Adds a unique description fr the next test","valuetype":"TestSuite","filenamebase":"describe_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"describe","codesample":"Dim testSuite as New TestSuite()\nCall testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function describe(desciption As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a unique description fr the next test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a unique description fr the next test","inlinecomment":" \t &amp;apos; Adds a unique description fr the next test","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite()&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"desciption","comment":"Proposed description","valuetype":"String","filenamebase":"desciption_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitedescribe","qn":"desciption","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Proposed description&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Proposed description","inlinecomment":" \t &amp;apos; Proposed description"}]},{"label":"duration","comment":"Duration of tests","valuetype":"String","filenamebase":"duration_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"duration","codesample":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function duration() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Duration of tests&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Duration of tests","inlinecomment":" \t &amp;apos; Duration of tests","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)", "signatureelements":["Function"]},{"label":"endTimer","comment":"Sets endime to Timer","containerclasstype":"","filenamebase":"endTimer_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"endTimer","codesample":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub endTimer()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets endime to Timer&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets endime to Timer","inlinecomment":" \t &amp;apos; Sets endime to Timer","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)", "signatureelements":["Sub"]},{"label":"getErrorMsg","comment":"Converts error message to human readable format.","valuetype":"String","filenamebase":"getErrorMsg_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"getErrorMsg","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nTry\n    Error 1502, &amp;quot;Not implemented&amp;quot;\nCatch\n   Print testSuite.getErrorMsg()\nEnd Try","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function getErrorMsg() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converts error message to human readable format.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converts error message to human readable format.","inlinecomment":" \t &amp;apos; Converts error message to human readable format.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    Error 1502, &amp;quot;Not implemented&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;   Print testSuite.getErrorMsg()&amp;lt;br /&amp;gt;End Try", "signatureelements":["Function"]},{"label":"getOutputFormat","comment":"Getter for output format, default is HTML","valuetype":"String","filenamebase":"getOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"getOutputFormat","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nPrint testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function getOutputFormat() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Getter for output format, default is HTML&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Getter for output format, default is HTML","inlinecomment":" \t &amp;apos; Getter for output format, default is HTML","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;", "signatureelements":["Function"]},{"label":"includeInTestRunner","comment":"Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().","valuetype":"TestSuite","filenamebase":"includeInTestRunner_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"includeInTestRunner","codesample":"Sub addTestSuite(testSuite as TestSuite)\n    Set me.testSuites(testSuite.title) = testSuite\n    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())\nEnd Sub","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function includeInTestRunner(testRunnerName As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().","inlinecomment":" \t &amp;apos; Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().","parentclassname":"TestSuite","codesamplehtml":"Sub addTestSuite(testSuite as TestSuite)&amp;lt;br /&amp;gt;    Set me.testSuites(testSuite.title) = testSuite&amp;lt;br /&amp;gt;    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Function"], "arguments":[{"label":"testRunnerName","comment":"TestRunner name test is included in","valuetype":"String","filenamebase":"testRunnerName_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteincludeInTestRunner","qn":"testRunnerName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;TestRunner name test is included in&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"TestRunner name test is included in","inlinecomment":" \t &amp;apos; TestRunner name test is included in"}]},{"label":"New","comment":"Constructor","containerclasstype":"","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"New","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub New(title As String)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)", "signatureelements":["Sub"], "arguments":[{"label":"title","comment":"Title for the report","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteNew","qn":"title","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Title for the report&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Title for the report","inlinecomment":" \t &amp;apos; Title for the report"}]},{"label":"outputTo","comment":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","valuetype":"TestSuite","filenamebase":"outputTo_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"outputTo","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function outputTo(outputLoc As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","inlinecomment":" \t &amp;apos; Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write reports","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteoutputTo","qn":"outputLoc","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Directory to write reports&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Directory to write reports","inlinecomment":" \t &amp;apos; Directory to write reports"}]},{"label":"ranSuccessfully","comment":"Whether there are errors, failures or missing assertions","valuetype":"Boolean","filenamebase":"ranSuccessfully_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"ranSuccessfully","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nDim emptyVar as Variant\nCall testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))\nIf (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function ranSuccessfully() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether there are errors, failures or missing assertions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether there are errors, failures or missing assertions","inlinecomment":" \t &amp;apos; Whether there are errors, failures or missing assertions","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim emptyVar as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))&amp;lt;br /&amp;gt;If (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;", "signatureelements":["Function"]},{"label":"runAfterEach","comment":"Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","containerclasstype":"","filenamebase":"runAfterEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"runAfterEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub runAfterEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","inlinecomment":" \t &amp;apos; Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","parentclassname":"TestSuite","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"runBeforeEach","comment":"Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","containerclasstype":"","filenamebase":"runBeforeEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"runBeforeEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub runBeforeEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","inlinecomment":" \t &amp;apos; Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","parentclassname":"TestSuite","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"setDisplayName","comment":"Sets the display name to show in reports.","valuetype":"TestSuite","filenamebase":"setDisplayName_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"setDisplayName","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test1&amp;quot;)\nCall testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function setDisplayName(displayName As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets the display name to show in reports.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets the display name to show in reports.","inlinecomment":" \t &amp;apos; Sets the display name to show in reports.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test1&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"displayName","comment":"A more readable explanation of the report. Used in XML output for Jenkins","valuetype":"String","filenamebase":"displayName_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetDisplayName","qn":"displayName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A more readable explanation of the report. Used in XML output for Jenkins&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A more readable explanation of the report. Used in XML output for Jenkins","inlinecomment":" \t &amp;apos; A more readable explanation of the report. Used in XML output for Jenkins"}]},{"label":"setOutputFormat","comment":"Sets the output format for the reports.","valuetype":"TestSuite","filenamebase":"setOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"setOutputFormat","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function setOutputFormat(formatType As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets the output format for the reports.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets the output format for the reports.","inlinecomment":" \t &amp;apos; Sets the output format for the reports.","parentclassname":"TestSuite","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"formatType","comment":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","valuetype":"String","filenamebase":"formatType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetOutputFormat","qn":"formatType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","inlinecomment":" \t &amp;apos; Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;"}]}], "variables":[{"label":"customBeforeAfter","comment":"","valuetype":"AbstractCustomBeforeAfter","filenamebase":"customBeforeAfter_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"customBeforeAfter","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public customBeforeAfter As AbstractCustomBeforeAfter","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"displayName","comment":"","valuetype":"String","filenamebase":"displayName_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"displayName","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public displayName As String","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"errors","comment":"","valuetype":"Integer","filenamebase":"errors_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"errors","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public errors As Integer","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"failures","comment":"","valuetype":"Integer","filenamebase":"failures_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"failures","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public failures As Integer","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"missingAssertions","comment":"","valuetype":"Integer","filenamebase":"missingAssertions_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"missingAssertions","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public missingAssertions As Integer","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"results","comment":"","valuetype":"TestCase","filenamebase":"results_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"results","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public results List As TestCase","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["List","Public"], "signatureelements":["Public"]},{"label":"runTime","comment":"","valuetype":"String","filenamebase":"runTime_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"runTime","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public runTime As String","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"suppressReport","comment":"","valuetype":"Boolean","filenamebase":"suppressReport_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"suppressReport","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public suppressReport As Boolean","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"tests","comment":"","valuetype":"Integer","filenamebase":"tests_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"tests","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public tests As Integer","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]},{"label":"title","comment":"","valuetype":"String","filenamebase":"title_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","qn":"title","codesample":"","signaturecode":2064,"instancecode":16,"f_returnsobject":1,"signature":"Public title As String","modifiers":"Public","commentblock":"","commenthtml":"","inlinecomment":"","parentclassname":"TestSuite","codesamplehtml":"", "attributes":["Public"], "signatureelements":["Public"]}]}
