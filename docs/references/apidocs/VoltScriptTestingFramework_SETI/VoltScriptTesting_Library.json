{"label":"VoltScriptTesting","comment":"VoltScript Unit and Integration Testing Framework","filenamebase":"VoltScriptTesting_Library","fqnprefix":"VoltScriptTestingFramework","fqn":"VoltScriptTestingFramework.VoltScriptTesting","codesample":"","signaturecode":8192,"instancecode":8192,"description":"","codesamplehtml":"","scriptcreator":"Paul Withers","signature":"Library VoltScriptTesting","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;VoltScript Unit and Integration Testing Framework&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"VoltScript Unit and Integration Testing Framework", "classes":[{"classname":"TestSuite","comment":"Core unit testing suite.","filenamebase":"TestSuite_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests 1&amp;quot;)\nDim myInt as Integer\ntestSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0\nmyInt = 1\ntestSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"D278FE46808F950D8025893400572160","lsxclassid":3,"signature":"Class TestSuite","modifiers":"","classname":"TestSuite","parentclass":"None","constructorsignature":"Function New(title As String) As TestSuite","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Core unit testing suite.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Core unit testing suite.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests 1&amp;quot;)&amp;lt;br /&amp;gt;Dim myInt as Integer&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test error&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Fails, actual is 0&amp;lt;br /&amp;gt;myInt = 1&amp;lt;br /&amp;gt;testSuite.describe(&amp;quot;Test success&amp;quot;).assertEqualsInteger(1, myInt)  &amp;apos;Succeeds", "methods":[{"label":"New","comment":"Constructor","valuetype":"TestSuite","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.New","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function New(title As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the report","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteNew","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteNew.title","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Title for the report&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Title for the report"}]},{"label":"addCustomBeforeAfter","comment":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","valuetype":"TestSuite","filenamebase":"addCustomBeforeAfter_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.addCustomBeforeAfter","codesample":"Dim testSuite as New TestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)\nDim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractCustomBeforeAfter\nCall testSuite.addCustomBeforeAfter(beforeAfter)","signaturecode":8,"instancecode":8,"signature":"Function addCustomBeforeAfter(customBeforeAfter As AbstractCustomBeforeAfter) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds object containing custom beforeAll, beforeEach, afterEach and/or afterAll code","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Custom BeforeAfter Tester&amp;quot;)&amp;lt;br /&amp;gt;Dim beforeAfter as New IntegerIncrementBeforeAfter()   &amp;apos; Extends AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;Call testSuite.addCustomBeforeAfter(beforeAfter)", "signatureelements":["Function"], "arguments":[{"label":"customBeforeAfter","comment":"Containing before and after functions","valuetype":"AbstractCustomBeforeAfter","filenamebase":"customBeforeAfter_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddCustomBeforeAfter","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddCustomBeforeAfter.customBeforeAfter","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Containing before and after functions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Containing before and after functions"}]},{"label":"checkStarted","comment":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.","filenamebase":"checkStarted_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.checkStarted","codesample":"Private Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Call Me.testSuite.checkStarted()\n       \n       &amp;apos; Run tests\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub checkStarted()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks whether an assertion has been run yet and, if not, starts the timer and runs beforeAll if a CustomBeforeAfter has been passed in.","codesamplehtml":"Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       &amp;apos; Run tests&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"completeReport","comment":"Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.","filenamebase":"completeReport_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.completeReport","codesample":"Sub Delete\n    Call Me.completeReport()\nEnd Sub","signaturecode":4,"instancecode":4,"signature":"Sub completeReport()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Ends time, triggers afterAll if a CustomBeforeAfter has been passed in, and prints out the report.","codesamplehtml":"Sub Delete&amp;lt;br /&amp;gt;    Call Me.completeReport()&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Sub"]},{"label":"delete","comment":"Destructor","filenamebase":"delete_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.delete","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub delete()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"describe","comment":"Adds a unique description fr the next test","valuetype":"TestSuite","filenamebase":"describe_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.describe","codesample":"Dim testSuite as New TestSuite()\nCall testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function describe(desciption As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a unique description fr the next test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a unique description fr the next test","codesamplehtml":"Dim testSuite as New TestSuite()&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test with no assertion&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"desciption","comment":"Proposed description","valuetype":"String","filenamebase":"desciption_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitedescribe","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitedescribe.desciption","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Proposed description&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Proposed description"}]},{"label":"duration","comment":"Duration of tests","valuetype":"String","filenamebase":"duration_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.duration","codesample":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function duration() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Duration of tests&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Duration of tests","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)", "signatureelements":["Function"]},{"label":"endTimer","comment":"Sets endime to Timer","filenamebase":"endTimer_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.endTimer","codesample":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)\nSleep(120)\nCall testSuite.endTimer()\nPrint &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)","signaturecode":4,"instancecode":4,"signature":"Sub endTimer()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets endime to Timer&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets endime to Timer","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Slept report&amp;quot;)&amp;lt;br /&amp;gt;Sleep(120)&amp;lt;br /&amp;gt;Call testSuite.endTimer()&amp;lt;br /&amp;gt;Print &amp;quot;Tests ran for &amp;quot; &amp; testSuite.duration &amp; &amp;quot; seconds&amp;quot;)", "signatureelements":["Sub"]},{"label":"getErrorMsg","comment":"Converts error message to human readable format.","valuetype":"String","filenamebase":"getErrorMsg_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.getErrorMsg","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nTry\n    Error 1502, &amp;quot;Not implemented&amp;quot;\nCatch\n   Print testSuite.getErrorMsg()\nEnd Try","signaturecode":8,"instancecode":8,"signature":"Function getErrorMsg() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converts error message to human readable format.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converts error message to human readable format.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;    Error 1502, &amp;quot;Not implemented&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;   Print testSuite.getErrorMsg()&amp;lt;br /&amp;gt;End Try", "signatureelements":["Function"]},{"label":"getOutputFormat","comment":"Getter for output format, default is HTML","valuetype":"String","filenamebase":"getOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.getOutputFormat","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nPrint testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function getOutputFormat() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Getter for output format, default is HTML&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Getter for output format, default is HTML","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print testSuite.getOutputFormat()   &amp;apos; Print &amp;quot;HTML&amp;quot;", "signatureelements":["Function"]},{"label":"includeInTestRunner","comment":"Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().","valuetype":"TestSuite","filenamebase":"includeInTestRunner_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.includeInTestRunner","codesample":"Sub addTestSuite(testSuite as TestSuite)\n    Set me.testSuites(testSuite.title) = testSuite\n    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())\nEnd Sub","signaturecode":8,"instancecode":8,"signature":"Function includeInTestRunner(testRunnerName As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets this test as included in a TestRunner. Called by TestRunner.addTestSuite().","codesamplehtml":"Sub addTestSuite(testSuite as TestSuite)&amp;lt;br /&amp;gt;    Set me.testSuites(testSuite.title) = testSuite&amp;lt;br /&amp;gt;    Call testSuite.includeInTestRunner(me.title).outputTo(getFilePath())&amp;lt;br /&amp;gt;End Sub", "signatureelements":["Function"], "arguments":[{"label":"testRunnerName","comment":"TestRunner name test is included in","valuetype":"String","filenamebase":"testRunnerName_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteincludeInTestRunner","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteincludeInTestRunner.testRunnerName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;TestRunner name test is included in&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"TestRunner name test is included in"}]},{"label":"outputTo","comment":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","valuetype":"TestSuite","filenamebase":"outputTo_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.outputTo","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function outputTo(outputLoc As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets a directory to write reports to, overriding default &amp;quot;unit-test-reports&amp;quot;","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.outputTo(&amp;quot;unit-tests/&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write reports","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteoutputTo","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteoutputTo.outputLoc","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Directory to write reports&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Directory to write reports"}]},{"label":"ranSuccessfully","comment":"Whether there are errors, failures or missing assertions","valuetype":"Boolean","filenamebase":"ranSuccessfully_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.ranSuccessfully","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nDim emptyVar as Variant\nCall testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))\nIf (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function ranSuccessfully() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether there are errors, failures or missing assertions&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether there are errors, failures or missing assertions","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim emptyVar as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;First Test&amp;quot;).assertTrue(IsEmpty(emptyVar))&amp;lt;br /&amp;gt;If (testSuite.ranSuccessfully) Then Print &amp;quot;Success&amp;quot;", "signatureelements":["Function"]},{"label":"runAfterEach","comment":"Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","filenamebase":"runAfterEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.runAfterEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub runAfterEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a AbstractCustomBeforeAfter has been passed in and, if so, calls afterEach. Triggered from automatically all in-built assertions.","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"runBeforeEach","comment":"Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","filenamebase":"runBeforeEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.runBeforeEach","codesample":"Dim globInt as Integer\nClass IntegerIncrementer as AbstractCustomBeforeAfter\n    Sub beforeEach()\n        a = a + 1\n    End Sub\n    Sub afterEach()\n        Print &amp;quot;Finished test&amp;quot;\n    End Sub\nEnd Class\nPrivate Class CustomTester as AbstractCustomTester\n    Function runTests as Boolean\n        Dim incrementer as New IntegerIncrementer()\n        Call Me.testSuite.addCustomBeforeAfter(incrementer)\n        Call Me.testSuite.checkStarted()\n       \n       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable\n       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)\n       Call Me.testSuite.runAfterEach()\n    End Function\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub runBeforeEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether an AbstractCustomBeforeAfter has been passed in and, if so, calls beforeEach. Triggered from automatically all in-built assertions.","codesamplehtml":"Dim globInt as Integer&amp;lt;br /&amp;gt;Class IntegerIncrementer as AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a = a + 1&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        Print &amp;quot;Finished test&amp;quot;&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class&amp;lt;br /&amp;gt;Private Class CustomTester as AbstractCustomTester&amp;lt;br /&amp;gt;    Function runTests as Boolean&amp;lt;br /&amp;gt;        Dim incrementer as New IntegerIncrementer()&amp;lt;br /&amp;gt;        Call Me.testSuite.addCustomBeforeAfter(incrementer)&amp;lt;br /&amp;gt;        Call Me.testSuite.checkStarted()&amp;lt;br /&amp;gt;       &amp;lt;br /&amp;gt;       Call Me.testSuite.runBeforeEach()   &amp;apos; Increments a global variable&amp;lt;br /&amp;gt;       Call Me.testSuite.describe(&amp;quot;Test global variable&amp;quot;).assertEqualsInteger(1, globInt)&amp;lt;br /&amp;gt;       Call Me.testSuite.runAfterEach()&amp;lt;br /&amp;gt;    End Function&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"setDisplayName","comment":"Sets the display name to show in reports.","valuetype":"TestSuite","filenamebase":"setDisplayName_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.setDisplayName","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test1&amp;quot;)\nCall testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setDisplayName(displayName As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets the display name to show in reports.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets the display name to show in reports.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test1&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setDisplayName(&amp;quot;Jenkins initial tests&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"displayName","comment":"A more readable explanation of the report. Used in XML output for Jenkins","valuetype":"String","filenamebase":"displayName_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetDisplayName","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetDisplayName.displayName","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A more readable explanation of the report. Used in XML output for Jenkins&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A more readable explanation of the report. Used in XML output for Jenkins"}]},{"label":"setOutputFormat","comment":"Sets the output format for the reports.","valuetype":"TestSuite","filenamebase":"setOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.setOutputFormat","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nCall testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setOutputFormat(formatType As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets the output format for the reports.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets the output format for the reports.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.setOutputFormat(&amp;quot;BOTH&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"formatType","comment":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","valuetype":"String","filenamebase":"formatType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetOutputFormat","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuitesetOutputFormat.formatType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;"}]},{"label":"assertTrue","comment":"Tests whether the value passed is a boolean True and returns assertion outcome.","valuetype":"Boolean","filenamebase":"assertTrue_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertTrue","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))","signaturecode":8,"instancecode":8,"signature":"Function assertTrue(actual As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether the value passed is a boolean True and returns assertion outcome.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether the value passed is a boolean True and returns assertion outcome.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsEmpty(actual))", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertTrue","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertTrue.actual","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to be tested&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to be tested"}]},{"label":"assertFalse","comment":"Tests whether the value passed is a boolean False","valuetype":"Boolean","filenamebase":"assertFalse_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertFalse","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)\nDim actual as Variant\nCall testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY","signaturecode":8,"instancecode":8,"signature":"Function assertFalse(actual As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether the value passed is a boolean False&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether the value passed is a boolean False","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test boolean&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Variant&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Boolean&amp;quot;).assertFalse(IsNull(actual))   &amp;apos; actual=EMPTY", "signatureelements":["Function"], "arguments":[{"label":"actual","comment":"Value to be tested","valuetype":"Boolean","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertFalse","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertFalse.actual","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to be tested&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to be tested"}]},{"label":"assertEqualsString","comment":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","valuetype":"Boolean","filenamebase":"assertEqualsString_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsString","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsString(expected As String, actual As String, caseInsensitive As Boolean) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two strings match, applying basic case sensitivity as required (LCase-ing expected and actual).","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, True)   &amp;apos; Returns true, matches case insensitive&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;, False)   &amp;apos; Returns true, case is different", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"String","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test against"},{"label":"actual","comment":"String to test","valuetype":"String","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test"},{"label":"caseInsensitive","comment":"Whether to compare in current case or as lower case","valuetype":"Boolean","filenamebase":"caseInsensitive_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsString.caseInsensitive","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether to compare in current case or as lower case&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether to compare in current case or as lower case"}]},{"label":"assertNotEqualString","comment":"Tests whether two strings do not match","valuetype":"Boolean","filenamebase":"assertNotEqualString_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualString","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)\nDim expected as String\nexpected = &amp;quot;Hello World&amp;quot;\nCall testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualString(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two strings do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two strings do not match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test strings&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as String&amp;lt;br /&amp;gt;expected = &amp;quot;Hello World&amp;quot;&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Strings do not match&amp;quot;).assertEqualsString(expected, &amp;quot;hello world&amp;quot;)   &amp;apos; Returns true, matches case insensitive", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"String to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test against"},{"label":"actual","comment":"String to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualString.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String to test"}]},{"label":"assertEqualsInteger","comment":"Tests whether two integers match","valuetype":"Boolean","filenamebase":"assertEqualsInteger_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsInteger","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 1\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two integers match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two integers match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 1&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test against"},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsInteger.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test"}]},{"label":"assertNotEqualInteger","comment":"Tests whether two integers do not match","valuetype":"Boolean","filenamebase":"assertNotEqualInteger_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualInteger","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)\nDim actual as Integer\nactual = 3 + 5\nCall testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualInteger(expected As Integer, actual As Integer) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two integers do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two integers do not match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test integers&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 3 + 5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Addition&amp;quot;).assertEqualsInteger(4, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Integer to test against","valuetype":"Integer","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test against"},{"label":"actual","comment":"Integer to test","valuetype":"Integer","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualInteger.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Integer to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Integer to test"}]},{"label":"assertEqualsDouble","comment":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","valuetype":"Boolean","filenamebase":"assertEqualsDouble_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsDouble","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsDouble(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two doubles match, CStr-ing expected and actual to avoid bit-level issues","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 2.5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test against"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsDouble.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertNotEqualDouble","comment":"Tests whether two doubles do not match, CStr-ing to avoid false positives.","valuetype":"Boolean","filenamebase":"assertNotEqualDouble_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualDouble","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)\nDim expected as Double\nexpected = 2.5\nCall testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualDouble(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two doubles do not match, CStr-ing to avoid false positives.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two doubles do not match, CStr-ing to avoid false positives.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test doubles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;expected = 2.5&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Subtraction&amp;quot;).assertEqualsDouble(expected, 5 - 3.5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Double to test against","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test against"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualDouble.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertIsBetween","comment":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsBetween_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIsBetween","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)","signaturecode":8,"instancecode":8,"signature":"Function assertIsBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is Between&amp;quot;).assertIsBetween(1, 5, 1)", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test against, the actual must be greater than or equal to this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween.expected1","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test against, the actual must be greater than or equal to this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test against, the actual must be greater than or equal to this"},{"label":"expected2","comment":"Upper bound to test against, the actual must be less than or equal to this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween.expected2","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test against, the actual must be less than or equal to this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test against, the actual must be less than or equal to this"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsBetween.actual","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertIsNotBetween","comment":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsNotBetween_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIsNotBetween","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test is not between&amp;quot;)\nCall testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)","signaturecode":8,"instancecode":8,"signature":"Function assertIsNotBetween(expected1 As Double, expected2 As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is NOT between two bounds (&amp;quot;between&amp;quot;, not &amp;quot;strictly between&amp;quot;). Note, this cannot be a delegated assertion.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test is not between&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not between&amp;quot;).assertIsNotBetween(1, 5, 0)", "signatureelements":["Function"], "arguments":[{"label":"expected1","comment":"Lower bound to test, the actual must be less than this","valuetype":"Double","filenamebase":"expected1_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween.expected1","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test, the actual must be less than this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test, the actual must be less than this"},{"label":"expected2","comment":"Upper bound to test, the actual must be greater than this","valuetype":"Double","filenamebase":"expected2_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween.expected2","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test, the actual must be greater than this&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test, the actual must be greater than this"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNotBetween.actual","argumentindex":3,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertIsGreaterThan","comment":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","valuetype":"Boolean","filenamebase":"assertIsGreaterThan_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIsGreaterThan","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test greater than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)","signaturecode":8,"instancecode":8,"signature":"Function assertIsGreaterThan(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is greater than an expected value. Note, this cannot be a delegated assertion.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test greater than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test greater than&amp;quot;).assertIsGreaterThan(1, 5)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Lower bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Lower bound to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Lower bound to test"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsGreaterThan.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertIsLessThan","comment":"Tests whether a double is less than an expected value","valuetype":"Boolean","filenamebase":"assertIsLessThan_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIsLessThan","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test less than&amp;quot;)\nCall testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)","signaturecode":8,"instancecode":8,"signature":"Function assertIsLessThan(expected As Double, actual As Double) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a double is less than an expected value&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a double is less than an expected value","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test less than&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test less than&amp;quot;).assertIsGreaterThan(1, 0)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Upper bound to test","valuetype":"Double","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Upper bound to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Upper bound to test"},{"label":"actual","comment":"Double to test","valuetype":"Double","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsLessThan.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Double to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Double to test"}]},{"label":"assertEqualsLong","comment":"Tests whether two Longs match","valuetype":"Boolean","filenamebase":"assertEqualsLong_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsLong","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsLong(expected As Long, actual As Long) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Longs match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Longs match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2094070921)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test against"},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsLong.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test"}]},{"label":"assertNotEqualLong","comment":"Tests whether two Longs do not match","valuetype":"Boolean","filenamebase":"assertNotEqualLong_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualLong","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)\nDim expected as Long\nexpected = 2094070921\nCall testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualLong(expected As Long, actual As Long) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Longs do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Longs do not match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test longs&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Long&amp;lt;br /&amp;gt;expected = 2094070921&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Longs&amp;quot;).assertEqualsLong(expected, 2000000000)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Long to test against","valuetype":"Long","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test against"},{"label":"actual","comment":"Long to test","valuetype":"Long","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualLong.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Long to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Long to test"}]},{"label":"assertEqualsSingle","comment":"Tests whether two Single match","valuetype":"Boolean","filenamebase":"assertEqualsSingle_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsSingle","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsSingle(expected As Single, actual As Single) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Single match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Single match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 6.02E23)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test against"},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsSingle.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test"}]},{"label":"assertNotEqualSingle","comment":"Tests whether two Singles do not match","valuetype":"Boolean","filenamebase":"assertNotEqualSingle_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualSingle","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)\nDim expected as Single\nexpected = 6.02E23\nCall testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualSingle(expected As Single, actual As Single) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two Singles do not match&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two Singles do not match","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test singles&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Single&amp;lt;br /&amp;gt;expected = 6.02E23&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Singles&amp;quot;).assertEqualsSingle(expected, 8.11E23)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Single to test against","valuetype":"Single","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test against"},{"label":"actual","comment":"Single to test","valuetype":"Single","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualSingle.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Single to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Single to test"}]},{"label":"assertEqualsNumeric","comment":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","valuetype":"Boolean","filenamebase":"assertEqualsNumeric_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsNumeric","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 2\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two numeric values match, converting them to double and calling assertEqualsDouble&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two numeric values match, converting them to double and calling assertEqualsDouble","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test against"},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsNumeric.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test"}]},{"label":"assertNotequalNumeric","comment":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","valuetype":"Boolean","filenamebase":"assertNotequalNumeric_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotequalNumeric","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)\nDim expected as Double\nDim actual as Integer\nexpected = 2.0\nactual = 4\nCall testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertNotequalNumeric(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether two numeric values do not match, converting them to double and calling assertNotEqualDouble","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test numerics&amp;quot;)&amp;lt;br /&amp;gt;Dim expected as Double&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;expected = 2.0&amp;lt;br /&amp;gt;actual = 4&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Numerics&amp;quot;).assertEqualsNumeric(expected, actual)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Numeric to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test against"},{"label":"actual","comment":"Numeric to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotequalNumeric.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Numeric to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Numeric to test"}]},{"label":"assertIs","comment":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIs_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIs","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test Is&amp;quot;)\nDim actual as String\nCall testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)","signaturecode":8,"instancecode":8,"signature":"Function assertIs(expectedType As String, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests whether a variant&amp;apos;s type matches an expected type. Compares both type names as lower case.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test Is&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as String&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test data type&amp;quot;).asserIs(&amp;quot;STRING&amp;quot;, actual)", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs.expectedType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type name expected for actual object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type name expected for actual object"},{"label":"actual","comment":"Scalar o object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIs.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Scalar o object to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Scalar o object to test"}]},{"label":"assertIsNot","comment":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","valuetype":"Boolean","filenamebase":"assertIsNot_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertIsNot","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test is no&amp;quot;)\nDim a as Integer\nCall testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)","signaturecode":8,"instancecode":8,"signature":"Function assertIsNot(expectedType As String, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests that a varian&amp;apos;ts type does not match an expected type. Compares both type names as lower case.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test is no&amp;quot;)&amp;lt;br /&amp;gt;Dim a as Integer&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test is not&amp;quot;).assertIsNot(&amp;quot;STRING&amp;quot;, a)", "signatureelements":["Function"], "arguments":[{"label":"expectedType","comment":"Type name expected for actual object","valuetype":"String","filenamebase":"expectedType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot.expectedType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type name expected for actual object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type name expected for actual object"},{"label":"actual","comment":"Scalar or object to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertIsNot.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Scalar or object to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Scalar or object to test"}]},{"label":"assertEqualsPrimitive","comment":"Tests two primitive variants are the same, ignoring data type and CStr-ing values","valuetype":"Boolean","filenamebase":"assertEqualsPrimitive_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsPrimitive","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsPrimitive(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests two primitive variants are the same, ignoring data type and CStr-ing values&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests two primitive variants are the same, ignoring data type and CStr-ing values","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitive(1, &amp;quot;1&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitive.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test"}]},{"label":"assertEqualsPrimitiveOrPrimitiveArray","comment":"Tests two variant or variant arrays are the same.","valuetype":"Boolean","filenamebase":"assertEqualsPrimitiveOrPrimitiveArray_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertEqualsPrimitiveOrPrimitiveArray","codesample":"Dim testSuite As New TestSuite(|Variant Array Tests|)\nDim a(7) As Variant, b() As Variant\nDim i As integer\n    \nFor i = 0 To UBound(a)\n    a(i) = i\nNext\n    \nCall testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not\n    \nReDim b(0)\nb(0) = 0\nCall testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal\n    \nReDim b(i - 1)\nFor i = 0 To UBound(b)\n    b(i) = i\nNext\nCall testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true\n    \nb(0) = 1\nCall testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching","signaturecode":8,"instancecode":8,"signature":"Function assertEqualsPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Tests two variant or variant arrays are the same.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Tests two variant or variant arrays are the same.","codesamplehtml":"Dim testSuite As New TestSuite(|Variant Array Tests|)&amp;lt;br /&amp;gt;Dim a(7) As Variant, b() As Variant&amp;lt;br /&amp;gt;Dim i As integer&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;For i = 0 To UBound(a)&amp;lt;br /&amp;gt;    a(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;Call testSuite.describe(|Test array and not array|).assertEqualsPrimitiveOrPrimitiveArray(a, 1)   &amp;apos; Returns false, expected is array, actual is not&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(0)&amp;lt;br /&amp;gt;b(0) = 0&amp;lt;br /&amp;gt;Call testSuite.describe(|Test unequal array length|).assertEqualsPrimitiveOrPrimitiveArray(a, b)    &amp;apos; Returns false, elements in arrays not equal&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;ReDim b(i - 1)&amp;lt;br /&amp;gt;For i = 0 To UBound(b)&amp;lt;br /&amp;gt;    b(i) = i&amp;lt;br /&amp;gt;Next&amp;lt;br /&amp;gt;Call testSuite.describe(|Test equal arrays|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns true&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;b(0) = 1&amp;lt;br /&amp;gt;Call testSuite.describe(|Test first element different|).assertEqualsPrimitiveOrPrimitiveArray(a, b)   &amp;apos; Returns false, element 1 not matching", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertEqualsPrimitiveOrPrimitiveArray.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test"}]},{"label":"assertNotEqualPrimitiveOrPrimitiveArray","comment":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","valuetype":"Boolean","filenamebase":"assertNotEqualPrimitiveOrPrimitiveArray_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.assertNotEqualPrimitiveOrPrimitiveArray","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)\nDim actual as Integer\nactual = 2\nCall testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)\nCall testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;","signaturecode":8,"instancecode":8,"signature":"Function assertNotEqualPrimitiveOrPrimitiveArray(expected As Variant, actual As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Compares two variants or variant arrays and tests they are not the same, CStr-ing non-arrays","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test primitives&amp;quot;)&amp;lt;br /&amp;gt;Dim actual as Integer&amp;lt;br /&amp;gt;actual = 2&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(3, actual)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test primitive data types&amp;quot;).assertEqualsPrimitiveOrPrimitiveArray(&amp;quot;2&amp;quot;, actual)   &amp;apos; Returns false, CStr(actual) matches &amp;quot;2&amp;quot;", "signatureelements":["Function"], "arguments":[{"label":"expected","comment":"Variant to test against","valuetype":"Variant","filenamebase":"expected_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray.expected","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test against&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test against"},{"label":"actual","comment":"Variant to test","valuetype":"Variant","filenamebase":"actual_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteassertNotEqualPrimitiveOrPrimitiveArray.actual","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Variant to test&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Variant to test"}]},{"label":"addResult","comment":"Adds a test success or failure to the results","filenamebase":"addResult_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.addResult","codesample":"Dim testSuite as New TestSuite(&amp;quot;Test with Results&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)\nCall testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)","signaturecode":4,"instancecode":4,"signature":"Sub addResult(success As Boolean, failMessage As String)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a test success or failure to the results&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a test success or failure to the results","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Test with Results&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Success&amp;quot;).addResult(True, &amp;quot;&amp;quot;)&amp;lt;br /&amp;gt;Call testSuite.describe(&amp;quot;Test Fail&amp;quot;).addResult(False, &amp;quot;Value is not valid&amp;quot;)", "signatureelements":["Sub"], "arguments":[{"label":"success","comment":"Whether the test was successful or not","valuetype":"Boolean","filenamebase":"success_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult.success","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether the test was successful or not&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether the test was successful or not"},{"label":"failMessage","comment":"A message to write to explain the failure","valuetype":"String","filenamebase":"failMessage_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddResult.failMessage","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A message to write to explain the failure&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A message to write to explain the failure"}]},{"label":"addError","comment":"Adds a test error to the results.","filenamebase":"addError_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.addError","codesample":"Dim testSuite as New TestSuite(&amp;quot;Error Suite&amp;quot;)\nTry\n  Call testSuite.describe(&amp;quot;Error test&amp;quot;)\n  Error 1500, &amp;quot;Error thrown&amp;quot;\nCatch\n  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))\nEnd Try","signaturecode":4,"instancecode":4,"signature":"Sub addError(errorMsg As String, errorStack As Variant)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a test error to the results.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a test error to the results.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Error Suite&amp;quot;)&amp;lt;br /&amp;gt;Try&amp;lt;br /&amp;gt;  Call testSuite.describe(&amp;quot;Error test&amp;quot;)&amp;lt;br /&amp;gt;  Error 1500, &amp;quot;Error thrown&amp;quot;&amp;lt;br /&amp;gt;Catch&amp;lt;br /&amp;gt;  Call addError(&amp;quot;Error &amp;quot; &amp; Error() &amp; &amp;quot; on line &amp;quot; &amp; Erl(), GetThreadInfo(12))&amp;lt;br /&amp;gt;End Try", "signatureelements":["Sub"], "arguments":[{"label":"errorMsg","comment":"A message to explain the error","valuetype":"String","filenamebase":"errorMsg_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError.errorMsg","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;A message to explain the error&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"A message to explain the error"},{"label":"errorStack","comment":"More detailed stack for the error","valuetype":"Variant","filenamebase":"errorStack_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteaddError.errorStack","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;More detailed stack for the error&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"More detailed stack for the error"}]}], "variables":[{"label":"customBeforeAfter","comment":"","valuetype":"AbstractCustomBeforeAfter","filenamebase":"customBeforeAfter_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.customBeforeAfter","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public customBeforeAfter As AbstractCustomBeforeAfter","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"displayName","comment":"","valuetype":"String","filenamebase":"displayName_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.displayName","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public displayName As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errors","comment":"","valuetype":"Integer","filenamebase":"errors_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.errors","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errors As Integer","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"failures","comment":"","valuetype":"Integer","filenamebase":"failures_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.failures","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public failures As Integer","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"missingAssertions","comment":"","valuetype":"Integer","filenamebase":"missingAssertions_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.missingAssertions","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public missingAssertions As Integer","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"results","comment":"","valuetype":"TestCase","filenamebase":"results_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.results","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public results List As TestCase","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "attributes":["List"], "signatureelements":["Type"]},{"label":"runTime","comment":"","valuetype":"String","filenamebase":"runTime_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.runTime","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public runTime As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"suppressReport","comment":"","valuetype":"Boolean","filenamebase":"suppressReport_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.suppressReport","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public suppressReport As Boolean","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"tests","comment":"","valuetype":"Integer","filenamebase":"tests_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.tests","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public tests As Integer","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"title","comment":"","valuetype":"String","filenamebase":"title_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuite.title","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public title As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]}]},{"classname":"AbstractCustomBeforeAfter","comment":"Class for custom beforeAll, beforeEach, afterEach and afterAll code.\nbeforeAll is automatically run during TestSuite.isStarted() function.\nbeforeEach is automatically run by core TestSuite assertions, but must be manually run in custom assertion tests.\nafterEach is automatically run by core TestSuite assertions, but must be run manually in custom assertion tests.\nafterAll is automatically run during TestSuite.delete() function, at the end of the scope for the TestSuite.","filenamebase":"AbstractCustomBeforeAfter_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"CE53564B6D5B5C7A8025893400572CF2","lsxclassid":4,"signature":"Class AbstractCustomBeforeAfter","modifiers":"","classname":"AbstractCustomBeforeAfter","parentclass":"None","constructorsignature":"Function New() As AbstractCustomBeforeAfter","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class for custom beforeAll, beforeEach, afterEach and afterAll code.&amp;lt;br /&amp;gt;beforeAll is automatically run during TestSuite.isStarted() function.&amp;lt;br /&amp;gt;beforeEach is automatically run by core TestSuite assertions, but must be manually run in custom assertion tests.&amp;lt;br /&amp;gt;afterEach is automatically run by core TestSuite assertions, but must be run manually in custom assertion tests.&amp;lt;br /&amp;gt;afterAll is automatically run during TestSuite.delete() function, at the end of the scope for the TestSuite.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class for custom beforeAll, beforeEach, afterEach and afterAll code.&amp;lt;br /&amp;gt;beforeAll is automatically run during TestSuite.isStarted() function.&amp;lt;br /&amp;gt;beforeEach is automatically run by core TestSuite assertions, but must be manually run in custom assertion tests.&amp;lt;br /&amp;gt;afterEach is automatically run by core TestSuite assertions, but must be run manually in custom assertion tests.&amp;lt;br /&amp;gt;afterAll is automatically run during TestSuite.delete() function, at the end of the scope for the TestSuite.","codesamplehtml":"", "methods":[{"label":"New","comment":"","valuetype":"AbstractCustomBeforeAfter","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New() As AbstractCustomBeforeAfter","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Function"]},{"label":"beforeEach","comment":"Code to run before each assertion.","filenamebase":"beforeEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter.beforeEach","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub beforeEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Code to run before each assertion.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Code to run before each assertion.","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"beforeAll","comment":"Code to run before any assertion starts.","filenamebase":"beforeAll_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter.beforeAll","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub beforeAll()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Code to run before any assertion starts.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Code to run before any assertion starts.","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"afterEach","comment":"Code to run after each assertion is completed.","filenamebase":"afterEach_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter.afterEach","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub afterEach()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Code to run after each assertion is completed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Code to run after each assertion is completed.","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]},{"label":"afterAll","comment":"Code to run after all assertions have been completed.","filenamebase":"afterAll_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomBeforeAfter.afterAll","codesample":"Private a as Integer\nPrivate b as Integer\n \nClass IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter\n    \n    Sub beforeAll()\n        a = 0\n        b = 0\n    End Sub\n    \n    Sub beforeEach()\n        a++\n    End Sub\n    \n    Sub afterEach()\n        b++\n    End Sub\n    \n    Sub afterAll()\n        Print |a is | &amp; a &amp; |, b is | &amp; b\n    End Sub\nEnd Class","signaturecode":4,"instancecode":4,"signature":"Sub afterAll()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Code to run after all assertions have been completed.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Code to run after all assertions have been completed.","codesamplehtml":"Private a as Integer&amp;lt;br /&amp;gt;Private b as Integer&amp;lt;br /&amp;gt; &amp;lt;br /&amp;gt;Class IntegerIncrementBeforeAfter As AbstractCustomBeforeAfter&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeAll()&amp;lt;br /&amp;gt;        a = 0&amp;lt;br /&amp;gt;        b = 0&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub beforeEach()&amp;lt;br /&amp;gt;        a++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterEach()&amp;lt;br /&amp;gt;        b++&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Sub afterAll()&amp;lt;br /&amp;gt;        Print |a is | &amp; a &amp; |, b is | &amp; b&amp;lt;br /&amp;gt;    End Sub&amp;lt;br /&amp;gt;End Class", "signatureelements":["Sub"]}]},{"classname":"AbstractCustomTester","comment":"Class for creating custom tests, e.g. for a specific LSX.","filenamebase":"AbstractCustomTester_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"856828E4A8408014802589340057E4BB","lsxclassid":5,"signature":"Class AbstractCustomTester","modifiers":"","classname":"AbstractCustomTester","parentclass":"None","constructorsignature":"Function New() As AbstractCustomTester","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class for creating custom tests, e.g. for a specific LSX.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class for creating custom tests, e.g. for a specific LSX.","codesamplehtml":"", "methods":[{"label":"New","comment":"","valuetype":"AbstractCustomTester","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New() As AbstractCustomTester","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Function"]},{"label":"addTestSuite","comment":"Loads a TestSuite into the tester, in which to record the results","valuetype":"AbstractCustomTester","filenamebase":"addTestSuite_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester.addTestSuite","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nDim tester as New DateTimeTester()   &amp;apos; Extends AbstractCustomTester\nCall tester.addTestSuite(testSuite).runTests()","signaturecode":8,"instancecode":8,"signature":"Function addTestSuite(testSuite As TestSuiteReport) As AbstractCustomTester","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Loads a TestSuite into the tester, in which to record the results&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Loads a TestSuite into the tester, in which to record the results","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim tester as New DateTimeTester()   &amp;apos; Extends AbstractCustomTester&amp;lt;br /&amp;gt;Call tester.addTestSuite(testSuite).runTests()", "signatureelements":["Function"], "arguments":[{"label":"testSuite","comment":"TestSuite in which to record results","valuetype":"TestSuiteReport","filenamebase":"testSuite_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingAbstractCustomTesteraddTestSuite","fqn":"VoltScriptTestingFrameworkVoltScriptTestingAbstractCustomTesteraddTestSuite.testSuite","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;TestSuite in which to record results&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"TestSuite in which to record results"}]},{"label":"runTests","comment":"Main function to run tests. Must be overridden.","valuetype":"Boolean","filenamebase":"runTests_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester.runTests","codesample":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)\nDim tester as New DateTimeTester()   &amp;apos; Extends AbstractCustomTester\n  \nCall tester.addTestSuite(testSuite).runTests()","signaturecode":8,"instancecode":8,"signature":"Function runTests() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Main function to run tests. Must be overridden.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Main function to run tests. Must be overridden.","codesamplehtml":"Dim testSuite as New TestSuite(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim tester as New DateTimeTester()   &amp;apos; Extends AbstractCustomTester&amp;lt;br /&amp;gt;  &amp;lt;br /&amp;gt;Call tester.addTestSuite(testSuite).runTests()", "signatureelements":["Function"]}], "variables":[{"label":"testSuite","comment":"","valuetype":"TestSuite","filenamebase":"testSuite_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester","fqn":"VoltScriptTestingFramework.VoltScriptTesting.AbstractCustomTester.testSuite","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public testSuite As TestSuite","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]}]},{"classname":"TestSuiteReport","comment":"Class for the HTML report for a TestSuite","filenamebase":"TestSuiteReport_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuiteReport","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"AFFE3042993BD96780258935003A3279","lsxclassid":6,"signature":"Class TestSuiteReport","modifiers":"","classname":"TestSuiteReport","parentclass":"None","constructorsignature":"Function New(outputLoc As String) As TestSuiteReport","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class for the HTML report for a TestSuite&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Class for the HTML report for a TestSuite","codesamplehtml":"", "methods":[{"label":"New","comment":"Constructor","valuetype":"TestSuiteReport","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuiteReport","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuiteReport.New","codesample":"","signaturecode":8,"instancecode":8,"signature":"Function New(outputLoc As String) As TestSuiteReport","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","codesamplehtml":"", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write the HTML or XML report to","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteReportNew","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteReportNew.outputLoc","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Directory to write the HTML or XML report to&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Directory to write the HTML or XML report to"}]},{"label":"printoutReport","comment":"Write out the actual HTML report","filenamebase":"printoutReport_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestSuiteReport","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestSuiteReport.printoutReport","codesample":"Sub completeReport()\n    \n    Dim testSuite as New TestSuiteReport(Me.outputLoc)\n    Call testSuite.printoutReport(Me)\n    \nEnd Sub","signaturecode":4,"instancecode":4,"signature":"Sub printoutReport(testSuite As TestSuite)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Write out the actual HTML report&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Write out the actual HTML report","codesamplehtml":"Sub completeReport()&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;    Dim testSuite as New TestSuiteReport(Me.outputLoc)&amp;lt;br /&amp;gt;    Call testSuite.printoutReport(Me)&amp;lt;br /&amp;gt;    &amp;lt;br /&amp;gt;End Sub", "signatureelements":["Sub"], "arguments":[{"label":"testSuite","comment":"Test suite to write out","valuetype":"TestSuite","filenamebase":"testSuite_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteReportprintoutReport","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestSuiteReportprintoutReport.testSuite","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Test suite to write out&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Test suite to write out"}]}]},{"classname":"TestRunner","comment":"Wrapper for outputting an index.htm for multiple TestSuites","filenamebase":"TestRunner_ObjectClass","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","codesample":"","signaturecode":128,"instancecode":128,"classtype":"Base","projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"2709F2D6CCA8EA6880258935003A6AA6","lsxclassid":7,"signature":"Class TestRunner","modifiers":"","classname":"TestRunner","parentclass":"None","constructorsignature":"Function New(title As String) As TestRunner","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Wrapper for outputting an index.htm for multiple TestSuites&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Wrapper for outputting an index.htm for multiple TestSuites","codesamplehtml":"", "methods":[{"label":"New","comment":"Constructor","valuetype":"TestRunner","filenamebase":"New_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.New","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function New(title As String) As TestRunner","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the test run","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnerNew","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnerNew.title","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Title for the test run&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Title for the test run"}]},{"label":"addTestSuite","comment":"Adds a TestSuite to this TestRunner","filenamebase":"addTestSuite_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.addTestSuite","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nDim testSuite as New TestSuite(&amp;quot;Tests1&amp;quot;)\nCall testRunner.addTestSuite(testSuite)","signaturecode":4,"instancecode":4,"signature":"Sub addTestSuite(testSuite As TestSuite)","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Adds a TestSuite to this TestRunner&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Adds a TestSuite to this TestRunner","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim testSuite as New TestSuite(&amp;quot;Tests1&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.addTestSuite(testSuite)", "signatureelements":["Sub"], "arguments":[{"label":"testSuite","comment":"TestSuite to add to this TestRunner","valuetype":"TestSuite","filenamebase":"testSuite_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestRunneraddTestSuite","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestRunneraddTestSuite.testSuite","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;TestSuite to add to this TestRunner&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"TestSuite to add to this TestRunner"}]},{"label":"createTestSuite","comment":"Creates a new TestSuite with a label and adds it to this TestRunner","valuetype":"TestSuite","filenamebase":"createTestSuite_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.createTestSuite","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nDim currentSuite as TestSuite\nSet currentSuite = testRunner.createTestSuite(&amp;quot;Tests1&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function createTestSuite(title As String) As TestSuite","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Creates a new TestSuite with a label and adds it to this TestRunner&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Creates a new TestSuite with a label and adds it to this TestRunner","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Dim currentSuite as TestSuite&amp;lt;br /&amp;gt;Set currentSuite = testRunner.createTestSuite(&amp;quot;Tests1&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"title","comment":"Title for the test suite","valuetype":"String","filenamebase":"title_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnercreateTestSuite","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnercreateTestSuite.title","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Title for the test suite&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Title for the test suite"}]},{"label":"Delete","comment":"Destructor. Prints out reports and erases test suites List.","filenamebase":"Delete_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.Delete","codesample":"","signaturecode":4,"instancecode":4,"signature":"Sub Delete()","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Destructor. Prints out reports and erases test suites List.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Destructor. Prints out reports and erases test suites List.","codesamplehtml":"", "signatureelements":["Sub"]},{"label":"getFilePath","comment":"Gets the directory to save the HTML / XML output to.","valuetype":"String","filenamebase":"getFilePath_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.getFilePath","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nPrint &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","signaturecode":8,"instancecode":8,"signature":"Function getFilePath() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Gets the directory to save the HTML / XML output to.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Gets the directory to save the HTML / XML output to.","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()", "signatureelements":["Function"]},{"label":"getOutputFormat","comment":"Getter for the output format, default is HTML.","valuetype":"String","filenamebase":"getOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.getOutputFormat","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nPrint &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()","signaturecode":8,"instancecode":8,"signature":"Function getOutputFormat() As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Getter for the output format, default is HTML.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Getter for the output format, default is HTML.","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Print &amp;quot;Tests will be written to &amp;quot; &amp; testRunner.getFilePath()) &amp; &amp;quot; as &amp;quot; &amp; testRunner.getOutputFormat()", "signatureelements":["Function"]},{"label":"outputTo","comment":"Sets a directory to write reports to.","valuetype":"TestRunner","filenamebase":"outputTo_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.outputTo","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nCall testRunner.outputTo(&amp;quot;unit-tests/&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function outputTo(outputLoc As String) As TestRunner","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets a directory to write reports to.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets a directory to write reports to.","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.outputTo(&amp;quot;unit-tests/&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"outputLoc","comment":"Directory to write reports","valuetype":"String","filenamebase":"outputLoc_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestRunneroutputTo","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestRunneroutputTo.outputLoc","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Directory to write reports&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Directory to write reports"}]},{"label":"setOutputFormat","comment":"Sets the output format for the reports","valuetype":"TestRunner","filenamebase":"setOutputFormat_Method","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.setOutputFormat","codesample":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)\nCall testRunner.setOutputFormat(&amp;quot;BOTH&amp;quot;)","signaturecode":8,"instancecode":8,"signature":"Function setOutputFormat(formatType As String) As TestRunner","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Sets the output format for the reports&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Sets the output format for the reports","codesamplehtml":"Dim testRunner as New TestRunner(&amp;quot;Tests&amp;quot;)&amp;lt;br /&amp;gt;Call testRunner.setOutputFormat(&amp;quot;BOTH&amp;quot;)", "signatureelements":["Function"], "arguments":[{"label":"formatType","comment":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;","valuetype":"String","filenamebase":"formatType_ValuedElement","fqnprefix":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnersetOutputFormat","fqn":"VoltScriptTestingFrameworkVoltScriptTestingTestRunnersetOutputFormat.formatType","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Format for the reports, &amp;quot;HTML&amp;quot;, &amp;quot;XML&amp;quot;, or &amp;quot;BOTH&amp;quot;"}]}], "variables":[{"label":"testSuites","comment":"","valuetype":"TestSuite","filenamebase":"testSuites_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestRunner.testSuites","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public testSuites List As TestSuite","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "attributes":["List"], "signatureelements":["Type"]}]}], "types":[{"classname":"TestCase","comment":"Type used to hold results of an individual unit test.","filenamebase":"TestCase_ObjectType","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestCase","codesample":"Dim testCase as New TestCase()\ntestCase.description = &amp;quot;My way cool test&amp;quot;\ntestCase.outcome = &amp;quot;Failed&amp;quot;\ntestCase.errorMsg = &amp;quot;Expected: 200, but was: 100&amp;quot;","signaturecode":64,"instancecode":64,"projectid":"48B1E34403B8B6D480258934005548BC","version":3,"classid":"82176E8FB4C177998025893400570617","lsxclassid":2,"signature":"Type TestCase","modifiers":"","classname":"TestCase","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type used to hold results of an individual unit test.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type used to hold results of an individual unit test.","codesamplehtml":"Dim testCase as New TestCase()&amp;lt;br /&amp;gt;testCase.description = &amp;quot;My way cool test&amp;quot;&amp;lt;br /&amp;gt;testCase.outcome = &amp;quot;Failed&amp;quot;&amp;lt;br /&amp;gt;testCase.errorMsg = &amp;quot;Expected: 200, but was: 100&amp;quot;", "variables":[{"label":"description","comment":"","valuetype":"String","filenamebase":"description_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestCase","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestCase.description","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public description As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"outcome","comment":"","valuetype":"String","filenamebase":"outcome_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestCase","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestCase.outcome","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public outcome As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errorMsg","comment":"","valuetype":"String","filenamebase":"errorMsg_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestCase","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestCase.errorMsg","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errorMsg As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]},{"label":"errorStack","comment":"","valuetype":"String","filenamebase":"errorStack_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting.TestCase","fqn":"VoltScriptTestingFramework.VoltScriptTesting.TestCase.errorStack","codesample":"","signaturecode":64,"instancecode":64,"signature":"Public errorStack As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "signatureelements":["Type"]}]}], "variables":[{"label":"BASE_REPORT_LOC","comment":"","valuetype":"String","filenamebase":"BASEREPORTLOC_Variable","fqnprefix":"VoltScriptTestingFramework.VoltScriptTesting","fqn":"VoltScriptTestingFramework.VoltScriptTesting.BASE_REPORT_LOC","codesample":"","signaturecode":64,"instancecode":64,"signature":"Const BASE_REPORT_LOC As String","modifiers":"","commentblock":"","commenthtml":"","codesamplehtml":"", "attributes":["Const"], "signatureelements":["Type"]}]}
