{"classname":"JSONParser","comment":"Class for parsing strings and files of JSON.","containerclasstype":"","filenamebase":"JSONParser_ObjectClass","fqnprefix":"JsonVSE.JsonLSX","qn":"JSONParser","codesample":"","signaturecode":1024,"instancecode":1024,"parentclassname":"NotesACL","classtype":"Base","classderivetype":"NotesACL","colitemtype":"JSONObject","colindextype":"Integer","projectid":"85258A0800611BA4852587F200501561","version":3,"classid":"85258A0800611BA4852587F3006DF3B9","lsxclassid":3,"signature":"Class JSONParser","modifiers":"","classname":"JSONParser","constructorsignature":"Function New() As JSONParser","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Class for parsing strings and files of JSON.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Class for parsing strings and files of JSON.","commenthtml":"Class for parsing strings and files of JSON.","codesamplehtml":"", "methods":[{"label":"GetRootObject","comment":"Gets the parsed JSON as a JsonObject.","valuetype":"JSONObject","filenamebase":"GetRootObject_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"GetRootObject","codesample":"%REM\n    The following example loads a string of JSON and accesses the content as a JsonObject\n%END REM\nDim parser as New JSONParser()\nDim jsonObj as JSONObject\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nSet jsonObj = parser.getRootObject()","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function GetRootObject() As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Gets the parsed JSON as a JsonObject.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Gets the parsed JSON as a JsonObject.","inlinecomment":" \t &amp;apos; Gets the parsed JSON as a JsonObject.","parentclassname":"JSONParser","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following example loads a string of JSON and accesses the content as a JsonObject&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JSONParser()&amp;lt;br /&amp;gt;Dim jsonObj as JSONObject&amp;lt;br /&amp;gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()", "signatureelements":["Function"]},{"label":"LoadFromFile","comment":"Reads a file and parses it as JSON.","valuetype":"Boolean","filenamebase":"LoadFromFile_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"LoadFromFile","codesample":"%REM\n    The following example loads JSOn from a file and returns it as a JSONObject\n%END REM\nDim parser as New JSONParser()\nDim jsonObj as JSONObject()\nCall parser.loadFromFile(CurDir &amp; &amp;quot;atlas.json&amp;quot;)\nSet jsonObj = parser.getRootObject()","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub LoadFromFile(FilePath As String) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Reads a file and parses it as JSON.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Reads a file and parses it as JSON.","inlinecomment":" \t &amp;apos; Reads a file and parses it as JSON.","parentclassname":"JSONParser","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following example loads JSOn from a file and returns it as a JSONObject&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JSONParser()&amp;lt;br /&amp;gt;Dim jsonObj as JSONObject()&amp;lt;br /&amp;gt;Call parser.loadFromFile(CurDir &amp; &amp;quot;atlas.json&amp;quot;)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()", "signatureelements":["Sub"], "arguments":[{"label":"FilePath","comment":"File consisting of JSON.","valuetype":"String","filenamebase":"FilePath_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONParserLoadFromFile","qn":"FilePath","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;File consisting of JSON.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"File consisting of JSON.","inlinecomment":" \t &amp;apos; File consisting of JSON."}]},{"label":"LoadFromJSON","comment":"Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","valuetype":"Boolean","filenamebase":"LoadFromJSON_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"LoadFromJSON","codesample":"%REM\n    The following example parses a compact string of JSON and pretty-prints it\n%END REM\nDim parser as New JSONParser()\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nPrint parser.toString(True)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub LoadFromJSON(JSON As String) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","inlinecomment":" \t &amp;apos; Parses a string of JSON. If the string passed is not valid JSON, th method throws an error 400, &amp;quot;JSON text is not valid&amp;quot;.","parentclassname":"JSONParser","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following example parses a compact string of JSON and pretty-prints it&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JSONParser()&amp;lt;br /&amp;gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&amp;lt;br /&amp;gt;Print parser.toString(True)", "signatureelements":["Sub"], "arguments":[{"label":"JSON","comment":"String of JSON to parse","valuetype":"String","filenamebase":"JSON_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONParserLoadFromJSON","qn":"JSON","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String of JSON to parse&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String of JSON to parse","inlinecomment":" \t &amp;apos; String of JSON to parse"}]},{"label":"LoadFromObject","comment":"Parses a JSON object from a passed JsonObject.","valuetype":"Boolean","filenamebase":"LoadFromObject_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"LoadFromObject","codesample":"%REM\n    The following code loads a specific JsonObject and passes it to another JsonObject.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as New JsonObject\nCall childObj.insertValue(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)\nCall parser.loadfromObject(childObj)\nSet jsonObj = parser.getrootobject\nPrint jsonObj.toString(false)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub LoadFromObject(Object As JSONObject) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Parses a JSON object from a passed JsonObject.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Parses a JSON object from a passed JsonObject.","inlinecomment":" \t &amp;apos; Parses a JSON object from a passed JsonObject.","parentclassname":"JSONParser","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a specific JsonObject and passes it to another JsonObject.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as New JsonObject&amp;lt;br /&amp;gt;Call childObj.insertValue(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)&amp;lt;br /&amp;gt;Call parser.loadfromObject(childObj)&amp;lt;br /&amp;gt;Set jsonObj = parser.getrootobject&amp;lt;br /&amp;gt;Print jsonObj.toString(false)", "signatureelements":["Sub"], "arguments":[{"label":"Object","comment":"JsonObject to pass through the parser","valuetype":"JSONObject","filenamebase":"Object_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONParserLoadFromObject","qn":"Object","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to pass through the parser&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to pass through the parser","inlinecomment":" \t &amp;apos; JsonObject to pass through the parser"}]},{"label":"New","comment":"Constructor","valuetype":"JSONParser","filenamebase":"New_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function New() As JSONParser","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JSONParser","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ToString","comment":"Outputs the root object of a JsonParser as a string, pretty-printed or compact.","valuetype":"String","filenamebase":"ToString_Method","fqnprefix":"JsonVSE.JsonLSX.JSONParser","qn":"ToString","codesample":"%REM\n   The following example loads a compact string of JSON and pretty-prints it.\n%END REM\nDim parser as New JsonParser()\nCall parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)\nPrint parser.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function ToString(PrettyPrint As Boolean) As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Outputs the root object of a JsonParser as a string, pretty-printed or compact.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Outputs the root object of a JsonParser as a string, pretty-printed or compact.","inlinecomment":" \t &amp;apos; Outputs the root object of a JsonParser as a string, pretty-printed or compact.","parentclassname":"JSONParser","codesamplehtml":"%REM&amp;lt;br /&amp;gt;   The following example loads a compact string of JSON and pretty-prints it.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Call parser.loadFromJson(|{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|)&amp;lt;br /&amp;gt;Print parser.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"PrettyPrint","comment":"Whether or not to pretty-print the JSON","valuetype":"Boolean","filenamebase":"PrettyPrint_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONParserToString","qn":"PrettyPrint","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether or not to pretty-print the JSON&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether or not to pretty-print the JSON","inlinecomment":" \t &amp;apos; Whether or not to pretty-print the JSON", "attributes":["BY_VAL"]}]}]}
