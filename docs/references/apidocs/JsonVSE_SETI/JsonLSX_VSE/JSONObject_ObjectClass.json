{"classname":"JSONObject","comment":"Object for holding JSON objects, JSON arrays or scalars","containerclasstype":"","filenamebase":"JSONObject_ObjectClass","fqnprefix":"JsonVSE.JsonLSX","qn":"JSONObject","codesample":"","signaturecode":1024,"instancecode":1024,"parentclassname":"NotesACL","classtype":"Base","classderivetype":"NotesACL","colitemtype":"JSONObject","colindextype":"Integer","projectid":"85258A0800611BA4852587F200501561","version":3,"classid":"85258A0800611BA4852587F2005023B9","lsxclassid":2,"signature":"Class JSONObject","modifiers":"","classname":"JSONObject","constructorsignature":"Function New() As JSONObject","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Object for holding JSON objects, JSON arrays or scalars&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","inlinecomment":" \t &amp;apos; Object for holding JSON objects, JSON arrays or scalars","commenthtml":"Object for holding JSON objects, JSON arrays or scalars","codesamplehtml":"", "methods":[{"label":"AppendToJSONArray","comment":"For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array.","valuetype":"Boolean","filenamebase":"AppendToJSONArray_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"AppendToJSONArray","codesample":"%REM\n    The following code appends a string of JSON arrays into an existing JsonObject.\n%END REM\nDim jp as new JsonParser\nCall jp.loadFromJson(|[]|)\nDim arrayjo as JsonObject\nSet arrayJo = jp.getrootobject()\nCall arrayJo.appendToJsonArray(&amp;quot;Hello&amp;quot;)\nCall arrayJo.appendToJsonArray(&amp;quot;New&amp;quot;)\nCall arrayJo.appendToJsonArray(&amp;quot;World&amp;quot;)\nPrint arrayJo.toString(false)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub AppendToJSONArray(Value As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array.","inlinecomment":" \t &amp;apos; For JsonObjects that are arrays, appends a value to the array. For new JsonObjects, it appends the value to the array and defines it as an array.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code appends a string of JSON arrays into an existing JsonObject.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jp as new JsonParser&amp;lt;br /&amp;gt;Call jp.loadFromJson(|[]|)&amp;lt;br /&amp;gt;Dim arrayjo as JsonObject&amp;lt;br /&amp;gt;Set arrayJo = jp.getrootobject()&amp;lt;br /&amp;gt;Call arrayJo.appendToJsonArray(&amp;quot;Hello&amp;quot;)&amp;lt;br /&amp;gt;Call arrayJo.appendToJsonArray(&amp;quot;New&amp;quot;)&amp;lt;br /&amp;gt;Call arrayJo.appendToJsonArray(&amp;quot;World&amp;quot;)&amp;lt;br /&amp;gt;Print arrayJo.toString(false)", "signatureelements":["Sub"], "arguments":[{"label":"Value","comment":"Value to add to the array","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectAppendToJSONArray","qn":"Value","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to add to the array&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to add to the array","inlinecomment":" \t &amp;apos; Value to add to the array"}]},{"label":"ChildCount","comment":"Number of child elements within this JsonObject.","valuetype":"Integer-Unsigned","filenamebase":"ChildCount_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Get.ChildCount","codesample":"","signaturecode":258,"instancecode":256,"signature":"Property Get ChildCount As Integer-Unsigned","modifiers":"Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Number of child elements within this JsonObject.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Number of child elements within this JsonObject.","inlinecomment":" \t &amp;apos; Number of child elements within this JsonObject.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"FindObjectByPath","comment":"Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","valuetype":"JSONObject","filenamebase":"FindObjectByPath_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"FindObjectByPath","codesample":"%REM\n    The following example loads a string of JSON and finds the element at &amp;quot;address/addr1&amp;quot;\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\npath(0) = &amp;quot;address&amp;quot;\npath(1) = &amp;quot;add1&amp;quot;\nSet childObj = jsonObj.findObjectByPath(path)\nPrint childObj.toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function FindObjectByPath(Labels As String) As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &amp;apos; Finds a JsonObject within the current JsonObject using an array of labels to navigate down the hierarchy.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following example loads a string of JSON and finds the element at &amp;quot;address/addr1&amp;quot;&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim path(1) as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;path(0) = &amp;quot;address&amp;quot;&amp;lt;br /&amp;gt;path(1) = &amp;quot;add1&amp;quot;&amp;lt;br /&amp;gt;Set childObj = jsonObj.findObjectByPath(path)&amp;lt;br /&amp;gt;Print childObj.toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Labels","comment":"Array of labels to use to find the JsonObject","valuetype":"String","filenamebase":"Labels_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectFindObjectByPath","qn":"Labels","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Array of labels to use to find the JsonObject&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Array of labels to use to find the JsonObject","inlinecomment":" \t &amp;apos; Array of labels to use to find the JsonObject", "attributes":["Array"]}]},{"label":"GetArrayValues","comment":"Deprecated: use getChildren() instead.","valuetype":"JSONObject","filenamebase":"GetArrayValues_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"GetArrayValues","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function GetArrayValues() As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Deprecated: use getChildren() instead.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Deprecated: use getChildren() instead.","inlinecomment":" \t &amp;apos; Deprecated: use getChildren() instead.","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"GetChild","comment":"Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","valuetype":"JSONObject","filenamebase":"GetChild_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"GetChild","codesample":"%REM\n   The following example loads a string of JSON, gets the &amp;quot;children&amp;quot; element and pretty-prints it.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.getChild(&amp;quot;children&amp;quot;).toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function GetChild(Label As String) As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","inlinecomment":" \t &amp;apos; Gets a child from the current JsonObject using its label. Returns an error 404 if the child JsonObject cannot be found.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;   The following example loads a string of JSON, gets the &amp;quot;children&amp;quot; element and pretty-prints it.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;children&amp;quot;).toString(True)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label of child","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectGetChild","qn":"Label","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label of child&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label of child","inlinecomment":" \t &amp;apos; Label of child"}]},{"label":"GetChildren","comment":"Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","valuetype":"JSONObject","filenamebase":"GetChildren_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"GetChildren","codesample":"%REM\n    The following code loads a string of JSON and prints the type of all direct children.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nForAll child in jsonObj.getChildren()\n   Print child.jsonType\nEnd ForAll","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function GetChildren() As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","inlinecomment":" \t &amp;apos; Gets all the children of the current JsonObject, as an array of JsonObjects. Only valid is the JsonObject is an object or an array.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and prints the type of all direct children.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;ForAll child in jsonObj.getChildren()&amp;lt;br /&amp;gt;   Print child.jsonType&amp;lt;br /&amp;gt;End ForAll", "signatureelements":["Function"]},{"label":"InsertObject","comment":"Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used.","valuetype":"JSONObject","filenamebase":"InsertObject_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"InsertObject","codesample":"%REM\n    The following code inserts a certain JsonObject into another JsonObject.\n%END REM\nDim jo as New JsonObject\nDim childJo as New JsonObject\nCall childJo.insertValue(&amp;quot;boolean&amp;quot;, true)\nCall jo.insertObject(childJo, &amp;quot;childObj&amp;quot;)\nPrint jo.toString(false)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub InsertObject(Object As JSONObject, Label As String) As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used.","inlinecomment":" \t &amp;apos; Inserts another JsonObject into an existing JsonObject, with an optional label. If no label is provided, the label of the JsonObject is used.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code inserts a certain JsonObject into another JsonObject.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jo as New JsonObject&amp;lt;br /&amp;gt;Dim childJo as New JsonObject&amp;lt;br /&amp;gt;Call childJo.insertValue(&amp;quot;boolean&amp;quot;, true)&amp;lt;br /&amp;gt;Call jo.insertObject(childJo, &amp;quot;childObj&amp;quot;)&amp;lt;br /&amp;gt;Print jo.toString(false)", "signatureelements":["Sub"], "arguments":[{"label":"Object","comment":"JsonObject to insert","valuetype":"JSONObject","filenamebase":"Object_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectInsertObject","qn":"Object","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject to insert&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject to insert","inlinecomment":" \t &amp;apos; JsonObject to insert"},{"label":"Label","comment":"Label to use when inserting","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectInsertObject","qn":"Label","argumentindex":2,"optionalvalue":"LIT_STR(&amp;quot;&amp;quot;)","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to use when inserting&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to use when inserting","inlinecomment":" \t &amp;apos; Label to use when inserting", "attributes":["CONST","OPTIONAL"]}]},{"label":"InsertValue","comment":"Inserts a value into a JsonObject using th label defined.","valuetype":"Boolean","filenamebase":"InsertValue_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"InsertValue","codesample":"%REM\n    The following code inserts a value that corresponds to the defined label into an existing JsonObect.\n%END REM\nDim jo as New JsonObject\nDim jp as New JSONParser\nDim jsonStr as String\njsonStr = |{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|\nCall jp.loadFromJSON(helloWorld)\nSet jo = jp.getrootobject\nCall jo.insertValue(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;)\nPrint jo.toString(false)","signaturecode":32,"instancecode":32,"f_returnsobject":0,"signature":"Sub InsertValue(Label As String, Value As Variant) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Inserts a value into a JsonObject using th label defined.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Inserts a value into a JsonObject using th label defined.","inlinecomment":" \t &amp;apos; Inserts a value into a JsonObject using th label defined.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code inserts a value that corresponds to the defined label into an existing JsonObect.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jo as New JsonObject&amp;lt;br /&amp;gt;Dim jp as New JSONParser&amp;lt;br /&amp;gt;Dim jsonStr as String&amp;lt;br /&amp;gt;jsonStr = |{&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}|&amp;lt;br /&amp;gt;Call jp.loadFromJSON(helloWorld)&amp;lt;br /&amp;gt;Set jo = jp.getrootobject&amp;lt;br /&amp;gt;Call jo.insertValue(&amp;quot;John&amp;quot;, &amp;quot;Doe&amp;quot;)&amp;lt;br /&amp;gt;Print jo.toString(false)", "signatureelements":["Sub"], "arguments":[{"label":"Label","comment":"Label to insert as","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectInsertValue","qn":"Label","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label to insert as&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label to insert as","inlinecomment":" \t &amp;apos; Label to insert as"},{"label":"Value","comment":"Value to add, either a scalar or another JsonObject","valuetype":"Variant","filenamebase":"Value_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectInsertValue","qn":"Value","argumentindex":2,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Value to add, either a scalar or another JsonObject&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Value to add, either a scalar or another JsonObject","inlinecomment":" \t &amp;apos; Value to add, either a scalar or another JsonObject"}]},{"label":"IsArray","comment":"Returns whether or not a given JsonObject is an array.","valuetype":"Boolean","filenamebase":"IsArray_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsArray","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are arrays.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isArray()                        &amp;apos;False\nPrint jsonObj.getChild(&amp;quot;children&amp;quot;).isArray()   &amp;apos;True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsArray() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a given JsonObject is an array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a given JsonObject is an array.","inlinecomment":" \t &amp;apos; Returns whether or not a given JsonObject is an array.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are arrays.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isArray()                        &amp;apos;False&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;children&amp;quot;).isArray()   &amp;apos;True", "signatureelements":["Function"]},{"label":"IsBoolean","comment":"Returns whether or not a JsonObject is a boolean.","valuetype":"Boolean","filenamebase":"IsBoolean_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsBoolean","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are booleans.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isBoolean()                    &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isBoolean() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsBoolean() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a JsonObject is a boolean.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a JsonObject is a boolean.","inlinecomment":" \t &amp;apos; Returns whether or not a JsonObject is a boolean.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are booleans.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isBoolean()                    &amp;apos; False&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isBoolean() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsChild","comment":"Returns whether or not the JsonObject has a child with the specified label.","valuetype":"Boolean","filenamebase":"IsChild_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsChild","codesample":"%REM\n    The following code loads a string of JSON and checks whether specific children exist.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isChild(&amp;quot;address&amp;quot;) &amp;apos; True\nPrint jsonObj.isChild(&amp;quot;hobbies&amp;quot;) &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsChild(Label As String) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not the JsonObject has a child with the specified label.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not the JsonObject has a child with the specified label.","inlinecomment":" \t &amp;apos; Returns whether or not the JsonObject has a child with the specified label.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether specific children exist.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isChild(&amp;quot;address&amp;quot;) &amp;apos; True&amp;lt;br /&amp;gt;Print jsonObj.isChild(&amp;quot;hobbies&amp;quot;) &amp;apos; False", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label within this JsonObject","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectIsChild","qn":"Label","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label within this JsonObject&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label within this JsonObject","inlinecomment":" \t &amp;apos; Label within this JsonObject"}]},{"label":"IsDescendant","comment":"Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","valuetype":"Boolean","filenamebase":"IsDescendant_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsDescendant","codesample":"%REM\n    The following code loads a string of JSON and checks whether descendants exist.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\npath(0) = &amp;quot;address&amp;quot;\npath(1) = &amp;quot;addr1&amp;quot;\nPrint jsonObj.isDescendant(path)   &amp;apos; True\npath(1) = &amp;quot;addr3&amp;quot;\nPrint jsonObj.isDescendant(path)   &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsDescendant(Path As String) As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","inlinecomment":" \t &amp;apos; Checks if there is a JsonObject within the current JsonObject, using an array of labels to navigate down the hierarchy.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether descendants exist.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim path(1) as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;path(0) = &amp;quot;address&amp;quot;&amp;lt;br /&amp;gt;path(1) = &amp;quot;addr1&amp;quot;&amp;lt;br /&amp;gt;Print jsonObj.isDescendant(path)   &amp;apos; True&amp;lt;br /&amp;gt;path(1) = &amp;quot;addr3&amp;quot;&amp;lt;br /&amp;gt;Print jsonObj.isDescendant(path)   &amp;apos; False", "signatureelements":["Function"], "arguments":[{"label":"Path","comment":"Array of labels to use to check for the JsonObject","valuetype":"String","filenamebase":"Path_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectIsDescendant","qn":"Path","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Array of labels to use to check for the JsonObject&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Array of labels to use to check for the JsonObject","inlinecomment":" \t &amp;apos; Array of labels to use to check for the JsonObject", "attributes":["Array"]}]},{"label":"IsNumber","comment":"Returns whether or not a JsonObject is a number.","valuetype":"Boolean","filenamebase":"IsNumber_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsNumber","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are numbers.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isNumber()                 &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;age&amp;quot;).isNumber() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsNumber() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a JsonObject is a number.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a JsonObject is a number.","inlinecomment":" \t &amp;apos; Returns whether or not a JsonObject is a number.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are numbers.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isNumber()                 &amp;apos; False&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;age&amp;quot;).isNumber() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsObject","comment":"Returns whether or not a JsonObject is an object.","valuetype":"Boolean","filenamebase":"IsObject_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsObject","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are JSON objects.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isObject()                    &amp;apos; True\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isObject() &amp;apos; False","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsObject() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a JsonObject is an object.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a JsonObject is an object.","inlinecomment":" \t &amp;apos; Returns whether or not a JsonObject is an object.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are JSON objects.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isObject()                    &amp;apos; True&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isObject() &amp;apos; False", "signatureelements":["Function"]},{"label":"IsScalar","comment":"Returns whether or not a JsonObject is a scalar value (string, number, boolean).","valuetype":"Boolean","filenamebase":"IsScalar_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsScalar","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are scalars.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isScalar()                    &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;living&amp;quot;).isScalar() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsScalar() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a JsonObject is a scalar value (string, number, boolean).&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a JsonObject is a scalar value (string, number, boolean).","inlinecomment":" \t &amp;apos; Returns whether or not a JsonObject is a scalar value (string, number, boolean).","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are scalars.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isScalar()                    &amp;apos; False&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;living&amp;quot;).isScalar() &amp;apos; True", "signatureelements":["Function"]},{"label":"IsString","comment":"Returns whether or not a JsonObject is a string.","valuetype":"Boolean","filenamebase":"IsString_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"IsString","codesample":"%REM\n    The following code loads a string of JSON and checks whether elements are strings.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nPrint jsonObj.isString()                       &amp;apos; False\nPrint jsonObj.getChild(&amp;quot;firstName&amp;quot;).isString() &amp;apos; True","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function IsString() As Boolean","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Returns whether or not a JsonObject is a string.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Returns whether or not a JsonObject is a string.","inlinecomment":" \t &amp;apos; Returns whether or not a JsonObject is a string.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and checks whether elements are strings.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Print jsonObj.isString()                       &amp;apos; False&amp;lt;br /&amp;gt;Print jsonObj.getChild(&amp;quot;firstName&amp;quot;).isString() &amp;apos; True", "signatureelements":["Function"]},{"label":"JSONType","comment":"Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.\nValues are:\n- string\n- number\n- array\n- boolean\n- object","valuetype":"String","filenamebase":"JSONType_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Get.JSONType","codesample":"","signaturecode":258,"instancecode":256,"signature":"Property Get JSONType As String","modifiers":"Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.&amp;lt;br /&amp;gt;Values are:&amp;lt;br /&amp;gt;- string&amp;lt;br /&amp;gt;- number&amp;lt;br /&amp;gt;- array&amp;lt;br /&amp;gt;- boolean&amp;lt;br /&amp;gt;- object&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.&amp;lt;br /&amp;gt;Values are:&amp;lt;br /&amp;gt;- string&amp;lt;br /&amp;gt;- number&amp;lt;br /&amp;gt;- array&amp;lt;br /&amp;gt;- boolean&amp;lt;br /&amp;gt;- object","inlinecomment":" \t &amp;apos; Type of the JsonObject as a string. Useful for logging. To check the JsonObject type in conditionals use the corresponding is... methods.\nValues are:\n- string\n- number\n- array\n- boolean\n- object","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"Label","comment":"Label for the JsonObject, blank for a JsonObject that is an array.","valuetype":"String","filenamebase":"Label_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Set.Label","codesample":"","signaturecode":260,"instancecode":256,"signature":"Property Set Label As String","modifiers":"Set","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label for the JsonObject, blank for a JsonObject that is an array.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label for the JsonObject, blank for a JsonObject that is an array.","inlinecomment":" \t &amp;apos; Label for the JsonObject, blank for a JsonObject that is an array.","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"New","comment":"Constructor","valuetype":"JSONObject","filenamebase":"New_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"New","codesample":"","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function New() As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Constructor&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Constructor","inlinecomment":" \t &amp;apos; Constructor","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Function"]},{"label":"ParentObject","comment":"JsonObject that contains this JsonObject, if available.","valuetype":"JSONObject","filenamebase":"ParentObject_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Get.ParentObject","codesample":"","signaturecode":258,"instancecode":256,"signature":"Property Get ParentObject As JSONObject","modifiers":"Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;JsonObject that contains this JsonObject, if available.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"JsonObject that contains this JsonObject, if available.","inlinecomment":" \t &amp;apos; JsonObject that contains this JsonObject, if available.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"RemoveChild","comment":"Removes a child from a JsonObject.","valuetype":"JSONObject","filenamebase":"RemoveChild_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"RemoveChild","codesample":"%REM\n    The following code removes the child using the defined label from the specified JsonObject.\n%END REM\nDim jo as New JsonObject\nDim jp as New JSONParser\nDim jsonStr as String\njsonStr = |{&amp;quot;John&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}}|\nCall jp.loadFromJSON(helloWorld)\nSet jo = jp.getrootobject\nCall jo.removeChild(&amp;quot;John&amp;quot;)\nPrint jo.toString(false)","signaturecode":64,"instancecode":64,"f_returnsobject":1,"signature":"Function RemoveChild(Label As String) As JSONObject","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Removes a child from a JsonObject.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Removes a child from a JsonObject.","inlinecomment":" \t &amp;apos; Removes a child from a JsonObject.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code removes the child using the defined label from the specified JsonObject.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim jo as New JsonObject&amp;lt;br /&amp;gt;Dim jp as New JSONParser&amp;lt;br /&amp;gt;Dim jsonStr as String&amp;lt;br /&amp;gt;jsonStr = |{&amp;quot;John&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;hello&amp;quot;:&amp;quot;world&amp;quot;}}|&amp;lt;br /&amp;gt;Call jp.loadFromJSON(helloWorld)&amp;lt;br /&amp;gt;Set jo = jp.getrootobject&amp;lt;br /&amp;gt;Call jo.removeChild(&amp;quot;John&amp;quot;)&amp;lt;br /&amp;gt;Print jo.toString(false)", "signatureelements":["Function"], "arguments":[{"label":"Label","comment":"Label of the child to remove","valuetype":"String","filenamebase":"Label_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjectRemoveChild","qn":"Label","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Label of the child to remove&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Label of the child to remove","inlinecomment":" \t &amp;apos; Label of the child to remove"}]},{"label":"ScalarValue","comment":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","valuetype":"Variant","filenamebase":"ScalarValue_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Set.ScalarValue","codesample":"","signaturecode":260,"instancecode":256,"signature":"Property Set ScalarValue As Variant","modifiers":"Set","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","inlinecomment":" \t &amp;apos; String, number or boolean value of this JsonObject. Only valid for JsonObjects where isScalar is true. Not valid for arrays or objects.","parentclassname":"JSONObject","codesamplehtml":"", "signatureelements":["Property","Set"]},{"label":"ShortValue","comment":"First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","valuetype":"String","filenamebase":"ShortValue_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Get.ShortValue","codesample":"","signaturecode":258,"instancecode":256,"signature":"Property Get ShortValue As String","modifiers":"Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","inlinecomment":" \t &amp;apos; First 16 characters of the toString() value of this JsonObject. Useful for debugging or logging purposes to easly identify the current JsonObject from a larger string of JSON.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]},{"label":"toString","comment":"Converts a JsonObject to a string, either pretty-printed or as compact JSON.","valuetype":"String","filenamebase":"toString_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"toString","codesample":"%REM\n    The following code loads a string of JSON and pretty-prints the address element.\n%END REM\nDim parser as New JsonParser()\nDim jsonObj as JsonObject\nDim childObj as JsonObject\nDim json as String\nDim path(1) as String\njson = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|\nCall parser.loadFromJson(json)\nSet jsonObj = parser.getRootObject()\nCall jsonObj.getChild(&amp;quot;address&amp;quot;).toString(True)","signaturecode":64,"instancecode":64,"f_returnsobject":0,"signature":"Function toString(PrettyPrint As Boolean) As String","modifiers":"","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Converts a JsonObject to a string, either pretty-printed or as compact JSON.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Converts a JsonObject to a string, either pretty-printed or as compact JSON.","inlinecomment":" \t &amp;apos; Converts a JsonObject to a string, either pretty-printed or as compact JSON.","parentclassname":"JSONObject","codesamplehtml":"%REM&amp;lt;br /&amp;gt;    The following code loads a string of JSON and pretty-prints the address element.&amp;lt;br /&amp;gt;%END REM&amp;lt;br /&amp;gt;Dim parser as New JsonParser()&amp;lt;br /&amp;gt;Dim jsonObj as JsonObject&amp;lt;br /&amp;gt;Dim childObj as JsonObject&amp;lt;br /&amp;gt;Dim json as String&amp;lt;br /&amp;gt;Dim path(1) as String&amp;lt;br /&amp;gt;json = |{&amp;quot;address&amp;quot;:{&amp;quot;add1&amp;quot;:&amp;quot;10 Main Street&amp;quot;,&amp;quot;add2&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;country&amp;quot;:&amp;quot;United Kingdom&amp;quot;,&amp;quot;county&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;postcode&amp;quot;:&amp;quot;NE1 1TT&amp;quot;,&amp;quot;town&amp;quot;:&amp;quot;London&amp;quot;},&amp;quot;age&amp;quot;:42,&amp;quot;children&amp;quot;:[{&amp;quot;age&amp;quot;:12,&amp;quot;firstName&amp;quot;:&amp;quot;Jane&amp;quot;},{&amp;quot;age&amp;quot;:10,&amp;quot;firstName&amp;quot;:&amp;quot;Fred&amp;quot;}],&amp;quot;firstName&amp;quot;:&amp;quot;John&amp;quot;,&amp;quot;lastName&amp;quot;:&amp;quot;Doe&amp;quot;,&amp;quot;living&amp;quot;:true}|&amp;lt;br /&amp;gt;Call parser.loadFromJson(json)&amp;lt;br /&amp;gt;Set jsonObj = parser.getRootObject()&amp;lt;br /&amp;gt;Call jsonObj.getChild(&amp;quot;address&amp;quot;).toString(True)", "signatureelements":["Function"], "arguments":[{"label":"PrettyPrint","comment":"Whether or not to pretty-print","valuetype":"Boolean","filenamebase":"PrettyPrint_ValuedElement","fqnprefix":"JsonVSEJsonLSXJSONObjecttoString","qn":"PrettyPrint","argumentindex":1,"commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Whether or not to pretty-print&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Whether or not to pretty-print","inlinecomment":" \t &amp;apos; Whether or not to pretty-print", "attributes":["BY_VAL"]}]},{"label":"ValueArray","comment":"Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","valuetype":"Variant","filenamebase":"ValueArray_Method","fqnprefix":"JsonVSE.JsonLSX.JSONObject","qn":"Get.ValueArray","codesample":"","signaturecode":258,"instancecode":256,"signature":"Property Get ValueArray As Variant","modifiers":"Get","commentblock":"&amp;lt;div class=&amp;quot;description&amp;quot;&amp;gt;\t&amp;lt;ul class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t&amp;lt;li class=&amp;quot;blockList&amp;quot;&amp;gt;\t\t\t&amp;lt;div class=&amp;quot;comments&amp;quot;&amp;gt;&amp;lt;!-- comment --&amp;gt;&amp;lt;pre&amp;gt;Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;\t\t\t&amp;lt;hr /&amp;gt;\t\t&amp;lt;/li&amp;gt;\t&amp;lt;/ul&amp;gt;&amp;lt;/div&amp;gt;","commenthtml":"Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","inlinecomment":" \t &amp;apos; Only valid for a JsonObject that contains an array of scalars. Returns a Variant array of the values.","parentclassname":"JSONObject","codesamplehtml":"", "attributes":["READ_ONLY"], "signatureelements":["Property","Get"]}]}
